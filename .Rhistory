"Other" = as.vector(dfSplit[dfSplit$chromosome_name == "Other", "gg_symbol"])
)
dfSplit <- dfMainData[,c("chromosome_name", "gg_symbol", "ENSGALG")]
dfSplit[dfSplit$chromosome_name != "Z" & dfSplit$chromosome_name != "W", "chromosome_name"] <- "Other"
dfSplit <- dfSplit[dfSplit$gg_symbol %in% row.names(dfTPM), ]
geneGroupList <- list(
"Z" = as.vector(dfSplit[dfSplit$chromosome_name == "Z", "gg_symbol"]),
"W" = as.vector(dfSplit[dfSplit$chromosome_name == "W", "gg_symbol"]),
"Other" = as.vector(dfSplit[dfSplit$chromosome_name == "Other", "gg_symbol"])
)
rowSplitVec <- row.names(mHmBase)
for (i in 1:length(geneGroupList)){
rowSplitVec[rowSplitVec %in% geneGroupList[[i]]] <- names(geneGroupList)[i]
}
ComplexHeatmap::ht_opt(
legend_border = "black",
heatmap_border = TRUE,
annotation_border = TRUE
)
columnSplitVec <- dfDesign$dataseries
tag <- "Custom_Heatmap"
plotListHM <- list()
chnkVec <- as.vector(NULL, mode="character")
plotListHM[[tag]] <- ComplexHeatmap::Heatmap(
mHmBase,
row_split               = rowSplitVec,
name                    = "log2 row mean",
column_title_gp         = grid::gpar(fontsize = 8),
row_title_rot           = 0,
column_split            = factor(columnSplitVec, levels=unique(columnSplitVec)),
cluster_column_slices   = FALSE,
cluster_columns         = FALSE,
cluster_rows            = TRUE,
show_row_names          = FALSE,
show_column_names       = TRUE,
column_names_side       = "bottom",
show_column_dend        = TRUE,
row_dend_width          = unit(20, "mm"),
show_heatmap_legend     = FALSE,
column_names_max_height = unit(8, "cm"),
row_names_gp            = grid::gpar(fontsize = 6),
top_annotation          = ht.anno,
col                     = circlize::colorRamp2(c(-3, 0, 3),c("#3060cf", "#fffbbc","#c4463a")),
column_names_rot        = 90,
border                  = TRUE
)
VersionPdfExt <- paste0(".V", gsub("-", "", Sys.Date()), ".pdf")
FNbase <- paste0(tag, VersionPdfExt)
tag
rm(list = ls()))
rm(list = ls())
username <- "E7E10E14_da"
pass <- "B4QlhE7k"
host <- "10.27.241.82"
db <- "rll_data"
designTB <- "E7E10E14V3_designTable"
mainTB <- "E7E10E14V3_bulk_rna_seq_table"
pcaTB <- "E7E10E14V3_PCA"
species <- "gallus_gallus"
geneIDcolumn <- "gg_symbol"
alignmentGeneID <- "ENSGALG"
designTScol <- "f_timepoint"
NtopGenes <- 500
devtools::install_github("decusinlabore/bioLOGIC")
library(bioLOGIC)
dfDesign <- import.db.table.from.db(dbname = db, dbtable = designTB, host = host, user = username, password = pass)
## Load main data table from database. In this table a lot of gene-level information for this project is assembled.
dfMainData <- import.db.table.from.db(dbname = db, dbtable = mainTB, host = host, user = username, password = pass)
## Load main pca table from database. This table contains cell-level PCA information.
dfPCA <- import.db.table.from.db(dbname = db, dbtable = pcaTB, host = host, user = username, password = pass)
## For some plots we want to limit the number of genes to the most interesting, so let's get those in a vector: Most
## variable gene names
dfVar <- dfMainData[dfMainData$logFC_cut_off != 0, c(geneIDcolumn, alignmentGeneID)]
mostVarGenes <- as.vector(unique(sort(dfVar[, geneIDcolumn])))
mostVarGenes <- na.omit(mostVarGenes[mostVarGenes != ""])
# Most variable gene IDs
mostVarIDs <- as.vector(unique(sort(dfVar[, alignmentGeneID])))
mostVarIDs <- na.omit(mostVarIDs[mostVarIDs != ""])
dfAnno <- unique(dfMainData[,c(geneIDcolumn, alignmentGeneID)])
geneSel <- mostVarGenes
## Making sure that all genes are present in the dataset:
geneSel <- unique(geneSel[geneSel %in% dfMainData[,geneIDcolumn]])
## Check genes used for the heatmap:
# sort(geneSel)
## Select TPM data for the heatmap
selVec <- c(geneIDcolumn, alignmentGeneID, names(dfMainData)[grep("norm_counts", names(dfMainData))])
dfTPM <- unique(dfMainData[dfMainData[, geneIDcolumn] %in% geneSel, selVec])
## Adjust column names
names(dfTPM) <- gsub("norm_counts_", "", names(dfTPM))
names(dfTPM) <- gsub(geneIDcolumn, "gene_id",  names(dfTPM))
## Remove duplicated gene names, if they exists
dup <- sum(duplicated(dfTPM$gene_id))
if (dup > 0){
#print(paste0(dup, " gene names in the heatmap data are duplicated."))
dfTPM[duplicated(dfTPM$gene_id),"gene_id"] <- paste0(dfTPM[duplicated(dfTPM$gene_id),"gene_id"], "_", dfTPM[duplicated(dfTPM$gene_id), alignmentGeneID])
}
dfTPM[,alignmentGeneID] <- NULL
row.names(dfTPM) <- dfTPM[,"gene_id"]
dfTPM[,"gene_id"] <- NULL
df.data <- data.matrix(dfTPM)
## Do manual correlaton calculation ##
## Get clusters using hclust and dist ##
mHmBase <- df.data
#heat.dat   <- t(apply(heat.dat,1,function(x){(x-mean(x))/sd(x)}))
mHmBase   <- t(apply(mHmBase,1,function(x){log2((x/mean(x)))}))
mHmBase <- round(mHmBase, 3)
mHmBase[mHmBase == -Inf] <- 0
dfCol <- unique(dfDesign[,c("sample_group", "sample_group_color")])
colVec <- dfCol$sample_group_color
names(colVec) <- dfCol$sample_group
dfCol2 <- unique(dfDesign[,c("dataseries", "dataseries_color")])
colVec2 <- dfCol2$dataseries_color
names(colVec2) <- dfCol2$dataseries
ht.anno <- ComplexHeatmap::HeatmapAnnotation(
Series = dfDesign$dataseries,
Groups =  dfDesign$sample_group,
col = list(
Series = colVec2,
Groups = colVec
)
)
## Setup Split By Chromosome
dfSplit <- unique(dfMainData[,c("chromosome_name", "gg_symbol", "ENSGALG")])
dfSplit[dfSplit$chromosome_name != "Z" & dfSplit$chromosome_name != "W", "chromosome_name"] <- "Other"
dfSplit <- dfSplit[dfSplit$gg_symbol %in% row.names(dfTPM), ]
geneGroupList <- list(
"Z" = as.vector(dfSplit[dfSplit$chromosome_name == "Z", "gg_symbol"]),
"W" = as.vector(dfSplit[dfSplit$chromosome_name == "W", "gg_symbol"]),
"Other" = as.vector(dfSplit[dfSplit$chromosome_name == "Other", "gg_symbol"])
)
rowSplitVec <- row.names(mHmBase)
for (i in 1:length(geneGroupList)){
rowSplitVec[sapply(rowSplitVec, function(x) unlist(strsplit(x, "_"))[1]) %in% geneGroupList[[i]]] <- names(geneGroupList)[i]
}
## Set options
figureCount <- 1
ComplexHeatmap::ht_opt(
legend_border = "black",
heatmap_border = TRUE,
annotation_border = TRUE
)
columnSplitVec <- dfDesign$dataseries
tag <- "Custom_Heatmap"
plotListHM <- list()
chnkVec <- as.vector(NULL, mode="character")
plotListHM[[tag]] <- ComplexHeatmap::Heatmap(
mHmBase,
row_split               = rowSplitVec,
name                    = "log2 row mean",
show_column_names       = FALSE,
show_row_names          = FALSE,
column_title_gp         = grid::gpar(fontsize = 8),
row_title_rot           = 0,
column_split            = factor(columnSplitVec, levels=unique(columnSplitVec)),
cluster_column_slices   = FALSE,
cluster_columns         = FALSE,
cluster_rows            = TRUE,
column_names_side       = "bottom",
show_column_dend        = TRUE,
row_dend_width          = unit(20, "mm"),
show_heatmap_legend     = FALSE,
column_names_max_height = unit(8, "cm"),
row_names_gp            = grid::gpar(fontsize = 6),
top_annotation          = ht.anno,
col                     = circlize::colorRamp2(c(-3, 0, 3),c("#3060cf", "#fffbbc","#c4463a")),
column_names_rot        = 90,
border                  = TRUE
)
plotListHM[[tag]] <- ComplexHeatmap::Heatmap(
mHmBase,
row_split               = rowSplitVec,
name                    = "log2 row mean",
show_column_names       = FALSE,
show_row_names          = FALSE,
column_title_gp         = grid::gpar(fontsize = 8),
row_title_rot           = 0,
column_split            = factor(columnSplitVec, levels=unique(columnSplitVec)),
cluster_column_slices   = FALSE,
cluster_columns         = FALSE,
cluster_rows            = TRUE,
column_names_side       = "bottom",
show_column_dend        = TRUE,
row_dend_width          = grid::unit(20, "mm"),
show_heatmap_legend     = FALSE,
column_names_max_height = grid::unit(8, "cm"),
row_names_gp            = grid::gpar(fontsize = 6),
top_annotation          = ht.anno,
col                     = circlize::colorRamp2(c(-3, 0, 3),c("#3060cf", "#fffbbc","#c4463a")),
column_names_rot        = 90,
border                  = TRUE
)
print(plotListHM[[tag]])
tag <- "Custom_Heatmap"
plotListHM <- list()
chnkVec <- as.vector(NULL, mode="character")
## Create correlation heatmap and clustering
plotListHM[[tag]] <- ComplexHeatmap::Heatmap(
mHmBase,
row_split               = rowSplitVec,
name                    = "log2 row mean",
show_column_names       = FALSE,
show_row_names          = FALSE,
column_title_gp         = grid::gpar(fontsize = 8),
row_title_rot           = 0,
column_split            = factor(columnSplitVec, levels=unique(columnSplitVec)),
cluster_column_slices   = FALSE,
cluster_columns         = FALSE,
cluster_rows            = TRUE,
column_names_side       = "bottom",
show_column_dend        = TRUE,
row_dend_width          = grid::unit(20, "mm"),
show_heatmap_legend     = FALSE,
column_names_max_height = grid::unit(8, "cm"),
row_names_gp            = grid::gpar(fontsize = 6),
top_annotation          = ht.anno,
col                     = circlize::colorRamp2(c(-3, 0, 3),c("#3060cf", "#fffbbc","#c4463a")),
column_names_rot        = 90,
border                  = TRUE
)
mHmBase
Obio@parameterList$primaryAlignmentGeneID
dfMainData <- import.db.table.from.db(dbname = db, dbtable = mainTB, host = host, user = username, password = pass)
#
selVec <- c(geneIDcolumn, alignmentGeneID, names(dfMainData)[grep("norm_counts", names(dfMainData))])
dfTPM <- unique(dfMainData[dfMainData[, geneIDcolumn] %in% geneSel, selVec])
head(dfTPM)
username <- "E7E10E14_da"
pass <- "B4QlhE7k"
host <- "10.27.241.82"
db <- "rll_data"
designTB <- "E7E10E14V3_designTable"
mainTB <- "E7E10E14V3_bulk_rna_seq_table"
pcaTB <- "E7E10E14V3_PCA"
species <- "gallus_gallus"
geneIDcolumn <- "gg_symbol"
alignmentGeneID <- "ENSGALG"
designTScol <- "f_timepoint"
NtopGenes <- 500
devtools::install_github("decusinlabore/bioLOGIC")
library(bioLOGIC)
## Load the design table from database. Here we will retrieve information on samples.
dfDesign <- import.db.table.from.db(dbname = db, dbtable = designTB, host = host, user = username, password = pass)
## Load main data table from database. In this table a lot of gene-level information for this project is assembled.
dfMainData <- import.db.table.from.db(dbname = db, dbtable = mainTB, host = host, user = username, password = pass)
## Load main pca table from database. This table contains cell-level PCA information.
dfPCA <- import.db.table.from.db(dbname = db, dbtable = pcaTB, host = host, user = username, password = pass)
## For some plots we want to limit the number of genes to the most interesting, so let's get those in a vector: Most
## variable gene names
dfVar <- dfMainData[dfMainData$logFC_cut_off != 0, c(geneIDcolumn, alignmentGeneID)]
mostVarGenes <- as.vector(unique(sort(dfVar[, geneIDcolumn])))
mostVarGenes <- na.omit(mostVarGenes[mostVarGenes != ""])
# Most variable gene IDs
mostVarIDs <- as.vector(unique(sort(dfVar[, alignmentGeneID])))
mostVarIDs <- na.omit(mostVarIDs[mostVarIDs != ""])
dfAnno <- unique(dfMainData[,c(geneIDcolumn, alignmentGeneID)])
# dfAnnoHL <- dfAnno[dfAnno[,geneIDcolumn] %in% highlightGenes,]
## Done with annotation                                                      ##
###############################################################################
###############################################################################
## select heatmap genes                                                      ##
## Gene selection for the heatmap:
## As a default we will start with the most variable genes. But you can put here
# any vector of genes, e.g.
# geneSel <- c("FOXL2", "DMRT1", "SOX9")
geneSel <- mostVarGenes
## Making sure that all genes are present in the dataset:
geneSel <- unique(geneSel[geneSel %in% dfMainData[,geneIDcolumn]])
## Check genes used for the heatmap:
# sort(geneSel)
## Select TPM data for the heatmap
selVec <- c(geneIDcolumn, alignmentGeneID, names(dfMainData)[grep("norm_counts", names(dfMainData))])
dfTPM <- unique(dfMainData[dfMainData[, geneIDcolumn] %in% geneSel, selVec])
## Adjust column names
names(dfTPM) <- gsub("norm_counts_", "", names(dfTPM))
names(dfTPM) <- gsub(geneIDcolumn, "gene_id",  names(dfTPM))
## Remove duplicated gene names, if they exists
dup <- sum(duplicated(dfTPM$gene_id))
dup
dfTPM <- dfTPM[!duplicated(dfTPM$gene_id), ]
## Remove duplicated gene names, if they exists
dup <- sum(duplicated(dfTPM$gene_id))
dup
dfTPM[,alignmentGeneID] <- NULL
row.names(dfTPM) <- dfTPM[,"gene_id"]
dfTPM[,"gene_id"] <- NULL
head(dfTPM)
df.data <- data.matrix(dfTPM)
## Do manual correlaton calculation ##
## Get clusters using hclust and dist ##
mHmBase <- df.data
#heat.dat   <- t(apply(heat.dat,1,function(x){(x-mean(x))/sd(x)}))
mHmBase   <- t(apply(mHmBase,1,function(x){log2((x/mean(x)))}))
mHmBase <- round(mHmBase, 3)
mHmBase[mHmBase == -Inf] <- 0
dfCol <- unique(dfDesign[,c("sample_group", "sample_group_color")])
colVec <- dfCol$sample_group_color
names(colVec) <- dfCol$sample_group
dfCol2 <- unique(dfDesign[,c("dataseries", "dataseries_color")])
colVec2 <- dfCol2$dataseries_color
names(colVec2) <- dfCol2$dataseries
## Setting Heatmap Annotation and Colors
ht.anno <- ComplexHeatmap::HeatmapAnnotation(
Series = dfDesign$dataseries,
Groups =  dfDesign$sample_group,
col = list(
Series = colVec2,
Groups = colVec
)
)
dfSplit <- unique(dfMainData[,c("chromosome_name", "gg_symbol", "ENSGALG")])
dfSplit[dfSplit$chromosome_name != "Z" & dfSplit$chromosome_name != "W", "chromosome_name"] <- "Other"
dfSplit <- dfSplit[dfSplit$gg_symbol %in% row.names(dfTPM), ]
geneGroupList <- list(
"Z" = as.vector(dfSplit[dfSplit$chromosome_name == "Z", "gg_symbol"]),
"W" = as.vector(dfSplit[dfSplit$chromosome_name == "W", "gg_symbol"]),
"Other" = as.vector(dfSplit[dfSplit$chromosome_name == "Other", "gg_symbol"])
)
rowSplitVec <- row.names(mHmBase)
for (i in 1:length(geneGroupList)){dfSplit <- unique(dfMainData[,c("chromosome_name", "gg_symbol", "ENSGALG")])
dfSplit[dfSplit$chromosome_name != "Z" & dfSplit$chromosome_name != "W", "chromosome_name"] <- "Other"
dfSplit <- dfSplit[dfSplit$gg_symbol %in% row.names(dfTPM), ]
geneGroupList <- list(
"Z" = as.vector(dfSplit[dfSplit$chromosome_name == "Z", "gg_symbol"]),
"W" = as.vector(dfSplit[dfSplit$chromosome_name == "W", "gg_symbol"]),
"Other" = as.vector(dfSplit[dfSplit$chromosome_name == "Other", "gg_symbol"])
)
rowSplitVec <- row.names(mHmBase)
for (i in 1:length(geneGroupList)){
rowSplitVec[sapply(rowSplitVec, function(x) unlist(strsplit(x, "_"))[1]) %in% geneGroupList[[i]]] <- names(geneGroupList)[i]
}
## Set options
figureCount <- 1
rowSplitVec[sapply(rowSplitVec, function(x) unlist(strsplit(x, "_"))[1]) %in% geneGroupList[[i]]] <- names(geneGroupList)[i]
}
## Set options
figureCount <- 1
mHmBase
## Annotate highlight genes
dfAnno <- unique(dfMainData[,c(geneIDcolumn, alignmentGeneID)])
# dfAnnoHL <- dfAnno[dfAnno[,geneIDcolumn] %in% highlightGenes,]
## Done with annotation                                                      ##
###############################################################################
###############################################################################
## select heatmap genes                                                      ##
## Gene selection for the heatmap:
## As a default we will start with the most variable genes. But you can put here
# any vector of genes, e.g.
# geneSel <- c("FOXL2", "DMRT1", "SOX9")
geneSel <- mostVarGenes
## Making sure that all genes are present in the dataset:
geneSel <- unique(geneSel[geneSel %in% dfMainData[,geneIDcolumn]])
## Check genes used for the heatmap:
# sort(geneSel)
## Select TPM data for the heatmap
selVec <- c(geneIDcolumn, alignmentGeneID, names(dfMainData)[grep("norm_counts", names(dfMainData))])
dfTPM <- unique(dfMainData[dfMainData[, geneIDcolumn] %in% geneSel, selVec])
## Adjust column names
names(dfTPM) <- gsub("norm_counts_", "", names(dfTPM))
names(dfTPM) <- gsub(geneIDcolumn, "gene_id",  names(dfTPM))
## Temporary fix: Remove duplicates:
dfTPM <- dfTPM[!duplicated(dfTPM$gene_id), ]
## Remove duplicated gene names, if they exists
dup <- sum(duplicated(dfTPM$gene_id))
dup
dfTPM[,alignmentGeneID] <- NULL
row.names(dfTPM) <- dfTPM[,"gene_id"]
dfTPM[,"gene_id"] <- NULL
## Done                                                                      ##
###############################################################################
## Step 2 Calculate correlation on most variable genes
df.data <- data.matrix(dfTPM)
## Do manual correlaton calculation ##
## Get clusters using hclust and dist ##
mHmBase <- df.data
#heat.dat   <- t(apply(heat.dat,1,function(x){(x-mean(x))/sd(x)}))
mHmBase   <- t(apply(mHmBase,1,function(x){log2((x/mean(x)))}))
mHmBase[mHmBase == -Inf] <- 0
mHmBase <- round(mHmBase, 3)
dfCol <- unique(dfDesign[,c("sample_group", "sample_group_color")])
colVec <- dfCol$sample_group_color
names(colVec) <- dfCol$sample_group
dfCol2 <- unique(dfDesign[,c("dataseries", "dataseries_color")])
colVec2 <- dfCol2$dataseries_color
names(colVec2) <- dfCol2$dataseries
## Setting Heatmap Annotation and Colors
ht.anno <- ComplexHeatmap::HeatmapAnnotation(
Series = dfDesign$dataseries,
Groups =  dfDesign$sample_group,
col = list(
Series = colVec2,
Groups = colVec
)
)
## Setup Split By Chromosome
dfSplit <- unique(dfMainData[,c("chromosome_name", "gg_symbol", "ENSGALG")])
dfSplit[dfSplit$chromosome_name != "Z" & dfSplit$chromosome_name != "W", "chromosome_name"] <- "Other"
dfSplit <- dfSplit[dfSplit$gg_symbol %in% row.names(dfTPM), ]
geneGroupList <- list(
"Z" = as.vector(dfSplit[dfSplit$chromosome_name == "Z", "gg_symbol"]),
"W" = as.vector(dfSplit[dfSplit$chromosome_name == "W", "gg_symbol"]),
"Other" = as.vector(dfSplit[dfSplit$chromosome_name == "Other", "gg_symbol"])
)
rowSplitVec <- row.names(mHmBase)
for (i in 1:length(geneGroupList)){
rowSplitVec[rowSplitVec %in% geneGroupList[[i]]] <- names(geneGroupList)[i]
}
rowSplitVec
length(rowSplitVec)
dim(mHmBase)
figureCount <- 1
ComplexHeatmap::ht_opt(
legend_border = "black",
heatmap_border = TRUE,
annotation_border = TRUE
)
columnSplitVec <- dfDesign$dataseries
tag <- "Custom_Heatmap"
plotListHM <- list()
chnkVec <- as.vector(NULL, mode="character")
mHmBase
mHmBase <- na.omit(mHmBase)
dim(mHmBase)
mHmBase <- df.data
#heat.dat   <- t(apply(heat.dat,1,function(x){(x-mean(x))/sd(x)}))
mHmBase   <- t(apply(mHmBase,1,function(x){log2((x/mean(x)))}))
mHmBase[mHmBase == -Inf] <- 0
mHmBase <- round(mHmBase, 3)
mHmBase <- na.omit(mHmBase)
dfCol <- unique(dfDesign[,c("sample_group", "sample_group_color")])
colVec <- dfCol$sample_group_color
names(colVec) <- dfCol$sample_group
dfCol2 <- unique(dfDesign[,c("dataseries", "dataseries_color")])
colVec2 <- dfCol2$dataseries_color
names(colVec2) <- dfCol2$dataseries
## Setting Heatmap Annotation and Colors
ht.anno <- ComplexHeatmap::HeatmapAnnotation(
Series = dfDesign$dataseries,
Groups =  dfDesign$sample_group,
col = list(
Series = colVec2,
Groups = colVec
)
)
## Setup Split By Chromosome
dfSplit <- unique(dfMainData[,c("chromosome_name", "gg_symbol", "ENSGALG")])
dfSplit[dfSplit$chromosome_name != "Z" & dfSplit$chromosome_name != "W", "chromosome_name"] <- "Other"
dfSplit <- dfSplit[dfSplit$gg_symbol %in% row.names(dfTPM), ]
geneGroupList <- list(
"Z" = as.vector(dfSplit[dfSplit$chromosome_name == "Z", "gg_symbol"]),
"W" = as.vector(dfSplit[dfSplit$chromosome_name == "W", "gg_symbol"]),
"Other" = as.vector(dfSplit[dfSplit$chromosome_name == "Other", "gg_symbol"])
)
rowSplitVec <- row.names(mHmBase)
for (i in 1:length(geneGroupList)){
rowSplitVec[rowSplitVec %in% geneGroupList[[i]]] <- names(geneGroupList)[i]
}
## Set options
figureCount <- 1
ComplexHeatmap::ht_opt(
legend_border = "black",
heatmap_border = TRUE,
annotation_border = TRUE
)
columnSplitVec <- dfDesign$dataseries
tag <- "Custom_Heatmap"
plotListHM <- list()
chnkVec <- as.vector(NULL, mode="character")
## Create correlation heatmap and clustering
plotListHM[[tag]] <- ComplexHeatmap::Heatmap(
mHmBase,
row_split               = rowSplitVec,
name                    = "log2 row mean",
show_column_names       = FALSE,
show_row_names          = FALSE,
column_title_gp         = grid::gpar(fontsize = 8),
row_title_rot           = 0,
column_split            = factor(columnSplitVec, levels=unique(columnSplitVec)),
cluster_column_slices   = FALSE,
cluster_columns         = FALSE,
cluster_rows            = TRUE,
column_names_side       = "bottom",
show_column_dend        = TRUE,
row_dend_width          = grid::unit(20, "mm"),
show_heatmap_legend     = FALSE,
column_names_max_height = grid::unit(8, "cm"),
row_names_gp            = grid::gpar(fontsize = 6),
top_annotation          = ht.anno,
col                     = circlize::colorRamp2(c(-3, 0, 3),c("#3060cf", "#fffbbc","#c4463a")),
column_names_rot        = 90,
border                  = TRUE
)
print(plotListHM[[tag]])
2200+3080
5280-1800
5280-1800-900
5280-1200-900
3300
13200/3
13200/4
13200/5
13200/6
13200-5900
7300/6
7300/3
50000*1.16
2194.20
2194.20*2
getwd()
getwd()
setwd("Y:/working/boeings/projects/boeings/stefan.boeing/dev_optim/biologicViewerSC/")
devtools::document()
devtools::check()
