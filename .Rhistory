column_dend_height=unit(10,"mm"),
#Dendrogram configurations: rows
clustering_distance_rows="euclidean",
clustering_method_rows="complete",
row_dend_width=unit(10,"mm"),
top_annotation = ha,
right_annotation = rha,
show_heatmap_legend = TRUE
#row_title = NULL,
#show_row_dend = FALSE
)
ht_opt(RESET = TRUE)
print(HMplotList[[tag]])
## Create heatmap plot ##
library(ComplexHeatmap)
library(circlize)
f1 = colorRamp2(seq(-4, 4, length = 3), c("#3060cf", "#fffbbc","#c4463a"))
## Create top annotation and colorbars ##
# from https://www.biostars.org/p/368265/
# from https://bioconductor.statistik.tu-dortmund.de/packages/3.1/bioc/vignettes/ComplexHeatmap/inst/doc/ComplexHeatmap.html
anno <- as.data.frame(colnames(mHmBase))
colnames(anno) <- "Sample"
anno$Group <- sapply(as.vector(anno[,1]), function(x) paste0(unlist(strsplit(x, "_"))[1], "_",unlist(strsplit(x, "_"))[2]))
## Color sample groups in line with the designated sample group color ##
#library(scales)
#hue_pal()(2)
#sample.group <- as.vector(unique(dfDesign$sample.group))
#sample.group_color <- sample.group
#dfDesign <- dfDesign[grep("PE",dfDesign$sample.group),]
#library(scales)
#sample.group_color = hue_pal()(length(sample.group_color))
#dfGroupColors <- unique(data.frame(sample.group, sample.group_color))
#dfDesign<- merge(dfDesign, dfGroupColors, by.x = "sample.group", "sample.group")
FN <- paste0(hpc.mount, "Projects/niakank/rebecca.lea/368A_RNA_seq_KLF17_WT_MT_RN19163/workdir/knl368A.design.file.txt")
dfDesign <- read.delim(FN, header = T, sep = "\t")
df <- unique(data.frame(dfDesign[,c("sample.group", "sample.group_color")], stringsAsFactors = F))
#df$sample.group_color <- as.factor(c("#FF1654", "#247BA0"))
GroupVec <- as.vector(unique(df$sample.group_color))
names(GroupVec) <- as.vector(unique(df$sample.group))
dfDesign.temp <- unique(dfDesign[,c("sample.id", "sample.group")])
df2 <- data.frame(dfDesign.temp[,c("sample.group")])
names(df2) <- "Group"
ha = HeatmapAnnotation(df = df2, col = list(Group = GroupVec, bar = GroupVec),show_legend = c("Group" = FALSE))
rha = rowAnnotation(
#foo = anno_mark(at = posVec, labels = names(posVec)),
bar  =  anno_text(row.names(mHmBase), gp = gpar(fontsize = 3))
)
ht_opt(
legend_border = "black",
heatmap_border = TRUE,
annotation_border = TRUE
)
rowSplitVec <- row.names(mHmBase)
for (i in 1:length(geneSelList)){
rowSplitVec[rowSplitVec %in% geneSelList[[i]]] <- names(geneSelList)[i]
}
colnames(mHmBase) <- gsub("DEseq2NormalizedReadCounts_", "", colnames(mHmBase))
HMplotList[[tag]] = Heatmap(
mHmBase,
column_title = gsub(
"_",
" ",
paste0("Heatmap ")
),
name = "",
#row_km = 5,
col = f1,
show_column_names = T,
show_row_names = F,
border = TRUE,
#Row split
row_split = rowSplitVec,
cluster_columns  = FALSE,
#Dendrogram configurations: columns
clustering_distance_columns="euclidean",
clustering_method_columns="complete",
column_dend_height=unit(10,"mm"),
#Dendrogram configurations: rows
clustering_distance_rows="euclidean",
clustering_method_rows="complete",
row_dend_width=unit(10,"mm"),
top_annotation = ha,
right_annotation = rha,
show_heatmap_legend = TRUE
#row_title = NULL,
#show_row_dend = FALSE
)
ht_opt(RESET = TRUE)
print(HMplotList[[tag]])
GSEADir = paste0(Obio@parameterList$localWorkDir, "GSEA")
logFC.column.name = "logFC"
host = Obio@parameterList$host
refdbname= "reference_categories_db_new"
refDBTableName = Obio@parameterList$enriched.categories.dbTableName
db.user = Obio@parameterList$db.user
db.password = db.pwd
tables = tables
df.dataTable = database.table2
outputDir = Obio@parameterList$outputDir
documentationParams <- list(
"title" = "Mechanisms of stress induced brain sparing in mammals",
"subtitle" = "Gould Lab - Ying Zhang and Patricia Serpente",
"abstract" = "During development, the growth of the brain is protected over that of the fetal body – a phenomenon known as ‘brain sparing’. In mammals, this occurs during asymmetric intrauterine growth restriction (A-IUGR), when the nutrient and/or oxygen supply to the fetus is restricted, often late in gestation. It is already known that brain sparing involves blood diversion towards the brain [1] but molecular mechanisms protecting the growth of neural stem and progenitor cells have yet to be identified. Notably, although the overall size of the brain is protected during A-IUGR, adult offspring are prone to develop neural disorders [2]. In this proposal, I will initiate a mechanistic study of mammalian brain sparing and its long-term effects using a maternal low protein diet (LP) model of A-IUGR recently established in our lab (Figure 1). Multiple mammalian studies indicate that dysregulation of several nutrient-dependent pathways in NSPCs impact upon brain size, including the insulin-like growth factor I/II (IGF-I/II) pathway, the AKT pathway and the mammalian target of rapamycin (mTOR) pathway. Our preliminary data suggest that LP inhibits the activation of IGF1R (Figure 2A). Moreover, phospho-S6, a readout of mTORC1 activation, is depleted in the neuron layer in LP brain but not in the ventricular and subventricular zone (VSVZ, Figure 2B). These data indicate that embryonic neural stem/progenitor cells but not differentiated cells (e.g. neurons) might have an alternative way to activate mTORC1 to support its growth and proliferation. To identify this alternative pathway, and more widely to define the transcriptional stress response to brain sparing, we would like to perform bulk RNA sequencing on dissected STD and LP forebrains. Pilot experiment: Bulk RNA sequencing with 2 conditions (STD vs LP, 3 biological replicates in each condition)
In this first phase, I will collect E18.5 embryos from 5x STD litters and 5x LP litters. Then I will randomly choose 1 embryo per litter and dissect the corresponding forebrains in cold PBS.I will flash frozen the tissue with liquid nitrogen.and store the tissue in -80C. Once I have all the tissue, I will extract RNA together using Trizol/RNeasy Micro kit. Then I will hand over the samples to the ASF for quality control and quantitation prior to cDNA library preparation.
Main experiment: Bulk RNA sequencing with 4 conditions (4 biological replicates in each condition)
If the bulk RNAseq data from the pilot is promising, then I will move to the main experiment. In this stage, I will dissect forebrains from E18.5 embryos from 5x litters (one per litter) in each condition: STD treated with vehicle or Rapamycin, and LP treated with vehicle and Rapamycin (using a concentration of 10 mg/kg per mouse, which I have already used to document effects on brain size, protein expression with antibody markers and cell proliferation.
References (to help the ASF to judge feasibility, add at least one ref that has done bulk RNAseq form E18.5 brains and one that has done scRNAseq from E18.5 mouse brains)
1. Bulk RNA sequencing PMID: 19617558
2. Single cell sequencing PMID: 30635555"
)
library(magrittr)
library(clusterProfiler)
install.packages("clusterProfiler")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
?enricher
library(magrittr)
?enricher
??enricher
library(clusterProfiler)
data(geneList, package="DOSE")
gene <- names(geneList)[abs(geneList) > 2]
wpgmtfile <- system.file("extdata/wikipathways-20180810-gmt-Homo_sapiens.gmt", package="clusterProfiler")
wp2gene <- read.gmt(wpgmtfile)
wp2gene <- wp2gene %>% tidyr::separate(ont, c("name","version","wpid","org"), "%")
wpid2gene <- wp2gene %>% dplyr::select(wpid, gene) #TERM2GENE
wpid2name <- wp2gene %>% dplyr::select(wpid, name) #TERM2NAME
wpgmtfile <- system.file("extdata/wikipathways-20180810-gmt-Homo_sapiens.gmt", package="clusterProfiler")
wpgmtfile
wp2gene <- read.gmt(wpgmtfile)
library(magrittr)
library(clusterProfiler)
wp2gene <- read.gmt(wpgmtfile)
library(Seurat)
https://biologic.crick.ac.uk/asl319A/scatterplot?x_axis=add_counts_Avg_log10_Expr_all&y_axis=norm_counts_Avg_log10_Expr_C_2&cat_id=as_lab_categories__203usedCutOff
usedCutOff
usedCutOff <- 0.5
gsub("\\.", "_", usedCutOff)
getwd()
"SC19153"
obj = Obio
reduce = Obio@parameterList$debugReduce
vars.to.regress = Obio@scDetailList$vars.to.regress
s.genes = NULL
g2m.genes = NULL
wait_on_lsfproject=rB4426
sbatch --time=18:00:00 --wrap "module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/3.6.0-foss-2016b-BABS;Rscript runB.r" --job-name=$project -p hmem --mem=300G -o rB.slurm >> commands.txt
pwd
"Aska Przewrocka"
chnkPrefix <- "create.10X.QC.table."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")
obj = Obio
reduce = Obio@parameterList$debugReduce
vars.to.regress = Obio@scDetailList$vars.to.regress
s.genes = NULL
g2m.genes = NULL
annotateCellCyclePhase <- F
?FindIntegrationAnchors
username <- "RN20157_da"
pass <- "TYRpgaEU"
host <- "10.27.241.82"
db <- "knl_data"
designTB <- "RN20157_designTable"
mainTB <- "RN20157_rna_seq_table"
pcaTB <- "RN20157_PCA"
species <- "homo_sapiens"
geneIDcolumn <- "hgnc_symbol"
alignmentGeneID <- "ENSG"
designTScol <- "timepoint"
devtools::install_github("decusinlabore/bioLOGIC")
library(bioLOGIC)
dfDesign <- import.db.table.from.db(
dbname = db,
dbtable = designTB,
host = host,
user = username,
password = pass
)
dfDesign[["dataseries"]] <- sapply(
dfDesign$sample.group,
function(x) unlist(strsplit(x, "_"))[1]
)
## Now let's select the columns we really need in dfDesign ##
designSelVec <- c("sample.id", "sample.group","dataseries", "timepoint")
dfDesign <- unique(dfDesign[,designSelVec])
names(dfDesign)
designSelVec <- c("sample_id", "sample_group","dataseries", "timepoint")
dfDesign <- unique(dfDesign[,designSelVec])
dfData <- import.db.table.from.db(
dbname = db,
dbtable = mainTB,
host = host,
user = username,
password = pass
)
selVec <- c(
"hgnc_symbol",
names(dfData)[grep("norm_counts", names(dfData))]
)
dfData <- unique(dfData[, selVec])
## Edit the column names so they match the design file sample.ids
names(dfData) <- gsub("norm_counts_", "", names(dfData))
names(dfData) <- gsub("_TPM", "", names(dfData))
geneName <- "KLF17"
dfPlot <- dfData[dfData$hgnc_symbol == geneName, ]
row.names(dfPlot) <- "y"
dfPlot$hgnc_symbol <- NULL
nrow(dfPlot)
dfPlot <- data.frame(t(dfPlot))
names(dfPlot)
geneName <- "KLF17"
dfPlot <- dfData[dfData$hgnc_symbol == geneName, ]
row.names(dfPlot) <- "y"
dfPlot$hgnc_symbol <- NULL
## If the selected gene is present in the dataset, dfPlot will have one row (and 0 if it is NOT present):
nrow(dfPlot)
## Transpose data table (change rows to columns) ##
dfPlot <- data.frame(t(dfPlot))
names(dfPlot)
dfPlot[["sample.id"]] <- row.names(dfPlot)
head(dfPlot)
dfPlot[["sample_id"]] <- row.names(dfPlot)
dfPlot <- merge(
dfDesign,
dfPlot,
by.x = "sample_id",
by.y = "sample_id"
)
head(dfPlot)
library(ggplot2)
library(tidyverse)
plotList <- list()
tag <- paste0("Linechart_", geneName)
confidenceAlpaha = 0.05
dfPlot <- dfPlot %>% group_by(sample.group) %>% summarize(SD = sd(y), Median = median(y), Mean=mean(y), y, timepoint, dataseries, sample.id)
plotList <- list()
tag <- paste0("Linechart_", geneName)
confidenceAlpaha = 0.05
dfPlot <- dfPlot %>% group_by(sample_group) %>% summarize(SD = sd(y), Median = median(y), Mean=mean(y), y, timepoint, dataseries, sample_id)
p1 <- ggplot(data = dfPlot
) + geom_line(aes(color = dataseries, x = timepoint, y=Mean)
) + geom_ribbon(aes(x = timepoint, y=Mean, ymin = Mean - SD, ymax = Mean + SD, fill = dataseries), alpha = 0.1, color = NA
) + geom_point(aes(color = dataseries, x = timepoint, y=y)
) + scale_color_manual(values = c("#000099", "#009900")
) + scale_fill_manual(values = c("#000099", "#009900")
) + theme_bw(
) + theme(
axis.text.y   = element_text(size=12),
axis.text.x   = element_text(size=12),
axis.title.y  = element_text(size=14),
axis.title.x  = element_text(size=14),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(face = "bold.italic", hjust = 0.5, size = 18
)
) + labs(
title = paste0(geneName),
y = "Expression (TPM)",
x = "Days"
)
p1
dfDesign
dfDesign <- dfDesign[dfDesign$timepoint != 10, ]
designSelVec <- c("sample_id", "sample_group","dataseries", "timepoint")
dfDesign <- unique(dfDesign[,designSelVec])
## Let's get the table containing the TPM values per sample
dfData <- import.db.table.from.db(
dbname = db,
dbtable = mainTB,
host = host,
user = username,
password = pass
)
## In dfData, the sample TPM columns have the prefix "norm_counts_". Let's select those
# columns alongside the gene name column "hgnc_symbol"
selVec <- c(
"hgnc_symbol",
names(dfData)[grep("norm_counts", names(dfData))]
)
## Let's select those columns ##
dfData <- unique(dfData[, selVec])
## Edit the column names so they match the design file sample.ids
names(dfData) <- gsub("norm_counts_", "", names(dfData))
names(dfData) <- gsub("_TPM", "", names(dfData))
## Now let's select a gene for plotting:
## You can start here if you want to plot another gene from the same dataset
geneName <- "KLF17"
dfPlot <- dfData[dfData$hgnc_symbol == geneName, ]
row.names(dfPlot) <- "y"
dfPlot$hgnc_symbol <- NULL
## If the selected gene is present in the dataset, dfPlot will have one row (and 0 if it is NOT present):
nrow(dfPlot)
## Transpose data table (change rows to columns) ##
dfPlot <- data.frame(t(dfPlot))
## Create sample.id column ##
dfPlot[["sample_id"]] <- row.names(dfPlot)
## Now let's add the timepoint information to the expression data ##
dfPlot <- merge(
dfDesign,
dfPlot,
by.x = "sample_id",
by.y = "sample_id"
)
## Done                                                                      ##
###############################################################################
## And here is the resulting gene expression table
head(dfPlot)
#Create the line chart #
library(ggplot2)
library(tidyverse)
plotList <- list()
tag <- paste0("Linechart_", geneName)
confidenceAlpaha = 0.05
dfPlot <- dfPlot %>% group_by(sample_group) %>% summarize(SD = sd(y), Median = median(y), Mean=mean(y), y, timepoint, dataseries, sample_id)
p1 <- ggplot(data = dfPlot
) + geom_line(aes(color = dataseries, x = timepoint, y=Mean)
) + geom_ribbon(aes(x = timepoint, y=Mean, ymin = Mean - SD, ymax = Mean + SD, fill = dataseries), alpha = 0.1, color = NA
) + geom_point(aes(color = dataseries, x = timepoint, y=y)
) + scale_color_manual(values = c("#000099", "#009900")
) + scale_fill_manual(values = c("#000099", "#009900")
) + theme_bw(
) + theme(
axis.text.y   = element_text(size=12),
axis.text.x   = element_text(size=12),
axis.title.y  = element_text(size=14),
axis.title.x  = element_text(size=14),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(face = "bold.italic", hjust = 0.5, size = 18
)
) + labs(
title = paste0(geneName),
y = "Expression (TPM)",
x = "Days"
)
print(p1)
p1
# This installation step only needs to be run once on your computer.
requiredPackages <- c("RMySQL", "ggplot2", "ggrepel", "ComplexHeatmap","circlize","tibble","DT", "fgsea")
installedPackages <- installed.packages()[,"Package"]
notInstalled <- requiredPackages[!(requiredPackages %in%  installedPackages)]
if (length(notInstalled) > 0){
sapply(notInstalled, install.packages)
}
devtools::install_github("decusinlabore/bioLOGIC")
username <- "RN20157_da"
pass <- "rjQXNGDw"
host <- "10.27.241.82"
db <- "knl_data"
designTB <- "RN20157_designTable"
mainTB <- "RN20157_rna_seq_table"
pcaTB <- "RN20157_PCA"
species <- "homo_sapiens"
geneIDcolumn <- "hgnc_symbol"
alignmentGeneID <- "ENSG"
designTScol <- "timepoint"
library(bioLOGIC)
## Load the design table from database. Here we will retrieve information on samples.
dfDesign <- import.db.table.from.db(
dbname = db,
dbtable = designTB,
host = host,
user = username,
password = pass
)
dfData <- import.db.table.from.db(
dbname = db,
dbtable = mainTB,
host = host,
user = username,
password = pass
)
library(bioLOGIC)
## Load the design table from database. Here we will retrieve information on samples.
dfDesign <- import.db.table.from.db(
dbname = db,
dbtable = designTB,
host = host,
user = username,
password = pass
)
dfDesign[["dataseries"]] <- sapply(
dfDesign$sample_group,
function(x) unlist(strsplit(x, "_"))[1]
)
##############################################################################
## Removing the day10 timepoint. Comment this block out to add it back in
dfDesign <- dfDesign[dfDesign$timepoint != 10, ]
##
##############################################################################
## Now let's select the columns we really need in dfDesign ##
designSelVec <- c("sample_id", "sample_group","dataseries", "timepoint")
dfDesign <- unique(dfDesign[,designSelVec])
dfData <- import.db.table.from.db(
dbname = db,
dbtable = mainTB,
host = host,
user = username,
password = pass
)
selVec <- c(
geneIDcolumn,
names(dfData)[grep("norm_counts", names(dfData))]
)
## Let's select those columns ##
dfData <- unique(dfData[, selVec])
## Edit the column names so they match the design file sample.ids
names(dfData) <- gsub("norm_counts_", "", names(dfData))
names(dfData) <- gsub("_TPM", "", names(dfData))
## Now let's select a gene for plotting:
## You can start here if you want to plot another gene from the same dataset
geneName <- "KLF17"
dfPlot <- dfData[dfData$hgnc_symbol == geneName, ]
row.names(dfPlot) <- "y"
dfPlot$hgnc_symbol <- NULL
## If the selected gene is present in the dataset, dfPlot will have one row (and 0 if it is NOT present):
nrow(dfPlot)
dfPlot <- data.frame(t(dfPlot))
## Create sample.id column ##
dfPlot[["sample_id"]] <- row.names(dfPlot)
## Now let's add the timepoint information to the expression data ##
dfPlot <- merge(
dfDesign,
dfPlot,
by.x = "sample_id",
by.y = "sample_id"
)
## Done                                                                      ##
###############################################################################
## And here is the resulting gene expression table
head(dfPlot)
library(ggplot2)
library(tidyverse)
plotList <- list()
tag <- paste0("Linechart_", geneName)
confidenceAlpaha = 0.05
dfPlot <- dfPlot %>% group_by(sample_group) %>% summarize(SD = sd(y), Median = median(y), Mean=mean(y), y, timepoint, dataseries, sample_id)
p1 <- ggplot(data = dfPlot
) + geom_line(aes(color = dataseries, x = timepoint, y=Mean)
) + geom_ribbon(aes(x = timepoint, y=Mean, ymin = Mean - SD, ymax = Mean + SD, fill = dataseries), alpha = 0.1, color = NA
) + geom_point(aes(color = dataseries, x = timepoint, y=y)
) + scale_color_manual(values = c("#000099", "#009900")
) + scale_fill_manual(values = c("#000099", "#009900")
) + theme_bw(
) + theme(
axis.text.y   = element_text(size=12),
axis.text.x   = element_text(size=12),
axis.title.y  = element_text(size=14),
axis.title.x  = element_text(size=14),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(face = "bold.italic", hjust = 0.5, size = 18
)
) + labs(
title = paste0(geneName),
y = "Expression (TPM)",
x = "Days"
)
print(p1)
rm(list=ls())
devtools::install_github("decusInLabore/biologicSeqTools")
devtools::install_github("decusinlabore/biologicViewerSC"
)
all.genes <- rownames(pbmc_small)
library(Seurat)
library(dplyr)
library(Seurat)
library(dplyr)
library(biologicViewerSC)
library(biologicSeqTools)
detach("package:ellipsis", unload = T)
detach("package::ellipsis", unload = T)
detach("package:ellipsis", unload = T)
remove.packages(ellipsis)
remove.packages("ellipsis")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("decusInLabore/biologicSeqTools")
devtools::install_github("decusinlabore/biologicViewerSC")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("decusInLabore/biologicSeqTools")
devtools::install_github("decusinlabore/biologicViewerSC")
devtools::install_github("decusInLabore/biologicSeqTools")
install.packages("devtools")
devtools::install_github("decusInLabore/biologicSeqTools")
getwd()
setwd("Y:/working/boeings/Projects/boeings/stefan.boeing/biologicSC/ba_biologicViewerSC")
devtools::check()
devtools::check()
devtools::build_vignettes()
getwd()
setwd("Y:/working/boeings/Projects/boeings/stefan.boeing/biologicSC/bbiologicViewerSC")
setwd("Y:/working/boeings/Projects/boeings/stefan.boeing/biologicSC/biologicViewerSC")
devtools::check()
devtools::check()
use_description()
usethis::use_description()
getwd()
devtools::check()
devtools::check()
devtools::install_github("decusinlabore/biologicSeqTools")
devtools::check()
install.packages("scales")
install.packages("scales")
devtools::check()
devtools::check()
devtools::install_github("decusinlabore/biologicSeqTools")
devtools::check()
