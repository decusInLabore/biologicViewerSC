setwd("external")
setwd("imp_GliaIfngrKO_app/")
FNparameters <- "parameters/menuParameters.txt"
if (file.exists(FNparameters)){
dfParam <- read.delim(
FNparameters,
header = T,
sep = "\t",
stringsAsFactors = F
)
parameterFileLoaded <- TRUE
## Check file integrity ##
if (!(sum(names(dfParam) %in% c("menuName", "displayName", "colSel", "displayOrder")))){
rm(dfParam)
parameterFileLoaded <- FALSE
}
} else {
parameterFileLoaded <- FALSE
}
FNcolParameters <- "parameters/colorParameters.txt"
if (file.exists(FNcolParameters)){
dfColOptions <- read.delim(
FNcolParameters,
header = T,
sep = "\t",
stringsAsFactors = F
)
colorFileLoaded <- TRUE
## Check file integrity ##
if (!(sum(names(dfColOptions) %in% c("menuName", "displayName", "colSel", "displayOrder")))){
rm(dfColOptions)
colorFileLoaded <- FALSE
}
} else {
colorFileLoaded <- FALSE
}
##                                                                           ##
###############################################################################
###############################################################################
## Data Access Module                                                        ##
FNkey <- "data/connect/db.txt"
FNrda <- "data/dfkey.rda"
if (file.exists(FNkey)){
dfkey <- read.delim(FNkey, stringsAsFactors = F, sep="\t")
} else if (file.exists(FNrda)){
load(FNrda)
} else {
data("dfkey")
}
geneDefault = as.character(dfkey$default)
host <- as.character(dfkey$url)
user <- as.character(dfkey$id)
DBpd <- as.character(dfkey$id2)
dbname <- as.character(dfkey$db)
coordinateTbName <- as.character(dfkey$coordTb)
exprTbName <- as.character(dfkey$exprTb)
geneID_TbName <- as.character(dfkey$geneTb)
pos <- grep("dataMode", names(dfkey))
if (length(pos) == 1){
if (dfkey$dataMode == "SQLite"){
dataMode <- dfkey$dataMode
} else {
dataMode <- "MySQL"
}
} else {
dataMode <- "MySQL"
}
## Done Data Access Module                                                   ##
###############################################################################
###############################################################################
## Query all genes to be listed                                              ##
oldw <- getOption("warn")
options(warn = -1)
if (dataMode == "SQLite"){
dbDB <- DBI::dbConnect(
drv = RSQLite::SQLite(),
dbname=dbname
)
} else {
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = user,
password = DBpd,
host = host,
dbname=dbname
)
}
#dbDB <- RMySQL::dbConnect(RMySQL::MySQL(), user = user, password = DBpd, host = host, dbname=dbname)
query <- paste0("SELECT DISTINCT gene FROM ", geneID_TbName)
dfGene <- DBI::dbGetQuery(dbDB, query)
allGenes <- as.vector(dfGene[,"gene"])
allGenes <- c(geneDefault, allGenes)
RMySQL::dbDisconnect(dbDB)
#
oldw <- getOption("warn")
options(warn = -1)
# dbDB <- DBI::dbConnect(RMySQL::MySQL(), user = user, password = DBpd, host = host, dbname=dbname)
if (dataMode == "SQLite"){
dbDB <- DBI::dbConnect(
drv = RSQLite::SQLite(),
dbname=dbname
)
} else {
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = user,
password = DBpd,
host = host,
dbname=dbname
)
}
query <- paste0("SELECT DISTINCT * FROM ", coordinateTbName)
dfCoordSel <- DBI::dbGetQuery(dbDB, query)
DBI::dbDisconnect(dbDB)
dfCoordSel[["all"]] <- "all"
###############################################################################
## Create order in which samples are displayed                               ##
if (colorFileLoaded){
dfSO <- dfColOptions[grep("^SAMPLENAME$", toupper(dfColOptions$menuName)), ]
if (nrow(dfSO) > 0){
dfSO <- unique(dfSO[,c("colOption", "displayOrder")])
dfSO <- dfSO[order(dfSO$displayOrder, decreasing = F),]
conditionVec <- as.vector(dfSO$colOption)
} else {
conditionVec <- unique(sort(dfCoordSel$sampleName))
}
} else {
pos <- grep("sampleOrder", names(dfCoordSel))
if (length(pos) > 0){
dfCoordSel <- unique(dfCoordSel[,c("sampleName", "sampleOrder")])
dfCoordSel <- dfCoordSel[order(dfCoordSel$sampleOrder, decreasing = F),]
conditionVec <- as.vector(dfCoordSel$sampleName)
} else {
conditionVec <- unique(sort(dfCoordSel$sampleName))
}
}
Nsamples <- length(conditionVec)
##
oldw <- getOption("warn")
options(warn = -1)
# dbDB <- DBI::dbConnect(RMySQL::MySQL(), user = user, password = DBpd, host = host, dbname=dbname)
if (dataMode == "SQLite"){
dbDB <- DBI::dbConnect(
drv = RSQLite::SQLite(),
dbname=dbname
)
} else {
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = user,
password = DBpd,
host = host,
dbname=dbname
)
}
query <- paste0("SELECT DISTINCT * FROM ", coordinateTbName)
dfCoordSel <- DBI::dbGetQuery(dbDB, query)
DBI::dbDisconnect(dbDB)
dfCoordSel[["all"]] <- "all"
###############################################################################
## Create order in which samples are displayed                               ##
if (colorFileLoaded){
dfSO <- dfColOptions[grep("^SAMPLENAME$", toupper(dfColOptions$menuName)), ]
if (nrow(dfSO) > 0){
dfSO <- unique(dfSO[,c("colOption", "displayOrder")])
dfSO <- dfSO[order(dfSO$displayOrder, decreasing = F),]
conditionVec <- as.vector(dfSO$colOption)
} else {
conditionVec <- unique(sort(dfCoordSel$sampleName))
}
} else {
pos <- grep("sampleOrder", names(dfCoordSel))
if (length(pos) > 0){
dfCoordSel <- unique(dfCoordSel[,c("sampleName", "sampleOrder")])
dfCoordSel <- dfCoordSel[order(dfCoordSel$sampleOrder, decreasing = F),]
conditionVec <- as.vector(dfCoordSel$sampleName)
} else {
conditionVec <- unique(sort(dfCoordSel$sampleName))
}
}
Nsamples <- length(conditionVec)
##
oldw <- getOption("warn")
options(warn = -1)
# dbDB <- DBI::dbConnect(RMySQL::MySQL(), user = user, password = DBpd, host = host, dbname=dbname)
if (dataMode == "SQLite"){
dbDB <- DBI::dbConnect(
drv = RSQLite::SQLite(),
dbname=dbname
)
} else {
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = user,
password = DBpd,
host = host,
dbname=dbname
)
}
query <- paste0("SELECT DISTINCT * FROM ", coordinateTbName)
dfCoordSel <- DBI::dbGetQuery(dbDB, query)
DBI::dbDisconnect(dbDB)
dfCoordSel[["all"]] <- "all"
###############################################################################
## Create order in which samples are displayed                               ##
if (colorFileLoaded){
dfSO <- dfColOptions[grep("^SAMPLENAME$", toupper(dfColOptions$menuName)), ]
if (nrow(dfSO) > 0){
dfSO <- unique(dfSO[,c("colOption", "displayOrder")])
dfSO <- dfSO[order(dfSO$displayOrder, decreasing = F),]
conditionVec <- as.vector(dfSO$colOption)
} else {
conditionVec <- unique(sort(dfCoordSel$sampleName))
}
} else {
pos <- grep("sampleOrder", names(dfCoordSel))
if (length(pos) > 0){
dfCoordSel <- unique(dfCoordSel[,c("sampleName", "sampleOrder")])
dfCoordSel <- dfCoordSel[order(dfCoordSel$sampleOrder, decreasing = F),]
conditionVec <- as.vector(dfCoordSel$sampleName)
} else {
conditionVec <- unique(sort(dfCoordSel$sampleName))
}
}
Nsamples <- length(conditionVec)
##
if (!parameterFileLoaded){
splitOptions <- names(dfCoordSel)
if (length(rmVec) > 0){
splitOptions <- splitOptions[-rmVec]
}
} else {
## If paramsfile is loaded
splitOptions <- unique(dfParam[dfParam$menuName == "splitPlotsBy", "colSel"])
names( splitOptions) <- gsub("_", " ", unique(dfParam[dfParam$menuName == "splitPlotsBy", "colSel"]))
}
splitOptions <- splitOptions[splitOptions %in% names(dfCoordSel)]
## Remove all split options with more than 20 options ##
Nopt <- apply(dfCoordSel[,splitOptions], 2, function(x) length(unique(x)))
Nopt <- sort(Nopt[Nopt < 42], decreasing = F)
splitOptions <- as.vector(names(Nopt))
pos <- c(
grep("sampleName", names(dfCoordSel)),
grep("orig_ident", names(dfCoordSel))
)
if (length(pos) > 0){
Nsamples <- length(unique(dfCoordSel[,pos[1]]))
} else {
Nsamples <- 1000
}
if (Nsamples > 3 | nrow(dfCoordSel) < 5000){
headVec <- c(
grep("all", splitOptions),
grep("sampleName", splitOptions),
grep("meta_", tolower(splitOptions)),
grep("clusterName", splitOptions),
grep("subClusterName", splitOptions)
)
} else {
headVec <- c(
grep(names(dfCoordSel)[pos[1]], splitOptions),
grep("meta_", tolower(splitOptions)),
grep("all", splitOptions),
grep("clusterName", splitOptions),
grep("subClusterName", splitOptions)
)
}
if (length(headVec) > 0){
headOptions <- splitOptions[headVec]
restVec <- splitOptions[-headVec]
splitOptions <- c(
headOptions,
restVec
)
}
names(splitOptions) <- splitOptions
names(splitOptions) <- gsub("all", "None", names(splitOptions) )
# names(splitOptions) <- gsub("meta_", "", names(splitOptions) )
# names(splitOptions) <- gsub("META_", "", names(splitOptions) )
# names(splitOptions) <- gsub("meta_", "", names(splitOptions) )
# names(splitOptions) <- gsub("sampleName", "Sample", names(splitOptions) )
# names(splitOptions) <- gsub("clusterName", "Cluster", names(splitOptions) )
# names(splitOptions) <- gsub("all", "None", names(splitOptions) )
numOptions <- names(dfCoordSel)[!(names(dfCoordSel)) %in% splitOptions]
numOptions <- c(
"lg10Expr",
numOptions
)
if (length(splitOptions[splitOptions == "all"]) > 0){
names(splitOptions[splitOptions == "all"]) <- "None"
}
## check if all column names are valid ##
check <- c(names(dfCoordSel))
splitOptions <- splitOptions[splitOptions %in% check]
defaultS <- splitOptions[1]
sDisplayName <- gsub("_", " ", unique(dfParam[dfParam$menuName == "splitPlotsBy", "displayName"]))
## Add to dropdownlist
dropDownList[["splitByColumn"]] <- list(
"displayName" = sDisplayName,
"selOptions" = splitOptions,
"selDisplayOptions" = gsub("_", " ", names(splitOptions)),
"default" = defaultS
)
## Done setting split options                                                ##
###############################################################################
## Remove all split options with more than 50 options ##
Nopt <- apply(dfCoordSel[,splitOptions], 2, function(x) length(unique(x)))
Nopt <- sort(Nopt[Nopt < 51], decreasing = F)
factorOptions <- splitOptions
numericOptions <- allColorOptions[!(allColorOptions %in% factorOptions)]
numericOptions <- numericOptions[numericOptions != "lg10Expr"]
numericRes <- as.vector(NULL, mode = "character")
for (i in 1:length(numericOptions)){
if (is.numeric(dfCoordSel[,numericOptions[i]])){
numericRes <- c(
numericRes,
numericOptions[i]
)
}
}
numericOptions <- numericRes
oldw <- getOption("warn")
options(warn = -1)
if (dataMode == "SQLite"){
dbDB <- DBI::dbConnect(
drv = RSQLite::SQLite(),
dbname=dbname
)
} else {
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = user,
password = DBpd,
host = host,
dbname=dbname
)
}
#dbDB <- RMySQL::dbConnect(RMySQL::MySQL(), user = user, password = DBpd, host = host, dbname=dbname)
query <- paste0("SELECT DISTINCT * FROM ", coordinateTbName)
dfCoordSel <- DBI::dbGetQuery(dbDB, query)
RMySQL::dbDisconnect(dbDB)
dfCoordSel$row_names <- NULL
dfCoordSel[["all"]] <- "all"
dfCoordSel$cellID <- gsub("[.]", "-", dfCoordSel$cellID)
dfCoordSel$cellID <- gsub("-", "_", dfCoordSel$cellID)
dfCoordSel
duplicated(dfCoord$cellID)
dfDL <- dfCoord
colorAnnoFound <- FALSE
colorFileLoaded
dfPlotCols <- dfColOptions[dfColOptions$menuName == input$colorBy, c("colOption", "colSel")]
input$colorBy = "shortName"
input <- list()
input$colorBy = "shortName"
dfPlotCols <- dfColOptions[dfColOptions$menuName == input$colorBy, c("colOption", "colSel")]
dim(dfPlotCols)
names(dfCoord)
input$colorBy = "seurat_clusters"
dfPlotCols <- dfColOptions[dfColOptions$menuName == input$colorBy, c("colOption", "colSel")]
dfPlotCols
dfColOptions$menuName
input$colorBy = "quadrant"
dfPlotCols <- dfColOptions[dfColOptions$menuName == input$colorBy, c("colOption", "colSel")]
dfPlotCols
checkDLvec <- sort(na.omit(as.vector(unique(dfDL[,input$colorBy]))))
checkColvec <- sort(na.omit(unique(dfPlotCols$colOption)))
identical(checkDLvec, checkColvec)
checkDLvec <- sort(na.omit(as.vector(unique(dfDL[,input$colorBy]))))
checkColvec <- sort(na.omit(unique(dfPlotCols$colOption)))
names(dfDL)
input$colorBy
input$colorBy = "meta_Region"
checkDLvec <- sort(na.omit(as.vector(unique(dfDL[,input$colorBy]))))
checkColvec <- sort(na.omit(unique(dfPlotCols$colOption)))
identical(checkDLvec, checkColvec)
checkDLvec
input$gene = "MEG3"
oldw <- getOption("warn")
options(warn = -1)
#dbDB <- RMySQL::dbConnect(RMySQL::MySQL(), user = user, password = DBpd, host = host, dbname=dbname)
if (dataMode == "SQLite"){
dbDB <- DBI::dbConnect(
drv = RSQLite::SQLite(),
dbname=dbname
)
} else {
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = user,
password = DBpd,
host = host,
dbname=dbname
)
}
if ( is.null(input$gene) | input$gene == "" ){
query <- paste0("SELECT * FROM ",exprTbName," WHERE gene = '",geneDefault,"'" )
} else {
query <- paste0("SELECT * FROM ",exprTbName," WHERE gene = '",input$gene,"'" )
}
#query <- paste0("SELECT DISTINCT * FROM agl315_gene_expr_tb WHERE gene = 'GFAP'" )
dfExprSel <- DBI::dbGetQuery(dbDB, query)
DBI::dbDisconnect(dbDB)
names(dfExprSel) <- gsub("condition", "cellID", names(dfExprSel))
names(dfExprSel) <- gsub("^expr$", "lg10Expr", names(dfExprSel))
dfExprSel$cellID <- gsub("[.]", "-", dfExprSel$cellID)
dfExprSel$cellID <- gsub("-", "_", dfExprSel$cellID)
dfExprSel$cellID <- gsub("^X", "", dfExprSel$cellID)
dfExprSel
duplicated(dfExprSel$cellID)
dfTemp<-dplyr::inner_join(dfCoord, dfExprSel, by=c("cellID", "cellID"))
dfTemp<-dplyr::inner_join(dfCoord, dfExprSel, by=c("cellID" = "cellID"))
dfTemp<-dplyr::inner_join(dfCoord, dfExprSel, by=c("cellID", "cellID"))
dfTemp<-dplyr::inner_join(dfCoord, dfExprSel, by=c("cellID"= "cellID"))
dim(dfTemp)
head(dfCoord)
head(dfExprSel)
head(dfCoordSel)
dfTemp<-dplyr::inner_join(dfCoordSel, dfExprSel, by=c("cellID"= "cellID"))
head(dfTemp)
dim(dfTemp)
head(dfExprSel)
head(dfCoord)
head(dfCoordSel)
dfTemp<-dplyr::inner_join(dfCoordSel, dfExprSel, by="cellID")
dim(dfTdim())
dim(dfTemp)
getwd()
oldw <- getOption("warn")
options(warn = -1)
if (dataMode == "SQLite"){
dbDB <- DBI::dbConnect(
drv = RSQLite::SQLite(),
dbname=dbname
)
} else {
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = user,
password = DBpd,
host = host,
dbname=dbname
)
}
#dbDB <- RMySQL::dbConnect(RMySQL::MySQL(), user = user, password = DBpd, host = host, dbname=dbname)
query <- paste0("SELECT DISTINCT * FROM ", coordinateTbName)
dfCoordSel <- DBI::dbGetQuery(dbDB, query)
RMySQL::dbDisconnect(dbDB)
dfCoordSel$row_names <- NULL
dfCoordSel[["all"]] <- "all"
dfCoordSel$cellID <- gsub("[.]", "-", dfCoordSel$cellID)
dfCoordSel$cellID <- gsub("-", "_", dfCoordSel$cellID)
dfCoordSel
head(dfCoordSel)
dfCoordSel$cellID
input$gene
oldw <- getOption("warn")
options(warn = -1)
#dbDB <- RMySQL::dbConnect(RMySQL::MySQL(), user = user, password = DBpd, host = host, dbname=dbname)
if (dataMode == "SQLite"){
dbDB <- DBI::dbConnect(
drv = RSQLite::SQLite(),
dbname=dbname
)
} else {
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = user,
password = DBpd,
host = host,
dbname=dbname
)
}
if ( is.null(input$gene) | input$gene == "" ){
query <- paste0("SELECT * FROM ",exprTbName," WHERE gene = '",geneDefault,"'" )
} else {
query <- paste0("SELECT * FROM ",exprTbName," WHERE gene = '",input$gene,"'" )
}
#query <- paste0("SELECT DISTINCT * FROM agl315_gene_expr_tb WHERE gene = 'GFAP'" )
dfExprSel <- DBI::dbGetQuery(dbDB, query)
DBI::dbDisconnect(dbDB)
names(dfExprSel) <- gsub("condition", "cellID", names(dfExprSel))
names(dfExprSel) <- gsub("^expr$", "lg10Expr", names(dfExprSel))
dfExprSel$cellID <- gsub("[.]", "-", dfExprSel$cellID)
dfExprSel$cellID <- gsub("-", "_", dfExprSel$cellID)
dfExprSel$cellID <- gsub("^X", "", dfExprSel$cellID)
dfExprSel
head(dfExprSel)
dfExprSel$cellID %in% dfCoordSel$cellID
dfTemp <- dplyr::inner_join(dfCoordSel, dfExprSel, by="cellID")
head(dfTemp)
dim(dfTemp)
dim(dfCoordSel)
dim(dfExpr)
dfTemp <- dplyr::outer_join(dfCoordSel, dfExprSel, by="cellID")
dfTemp <- dplyr::full_join(dfCoordSel, dfExprSel, by="cellID")
dim(dfTemp)
dfTemp2 <- merge(dfCoordSel, dfExprSel, by.x = "cellID", by.y="cellID", all=TRUE)
dim(dfTemp2)
dfTemp <- dplyr::full_join(dfCoordSel, dfExprSel, by="cellID")
dfTemp2 <- merge(dfCoordSel, dfExprSel, by.x = "cellID", by.y="cellID", all=TRUE)
devtools::install_github("eddelbuettel/rbenchmark")
benchmark(getwd())
rbenchmark::benchmark(getwd())
benchmark(dfTemp2 <- merge(dfCoordSel, dfExprSel, by.x = "cellID", by.y="cellID", all=TRUE))
rbenchmark::benchmark(dfTemp2 <- merge(dfCoordSel, dfExprSel, by.x = "cellID", by.y="cellID", all=TRUE))
benchmark(dfTemp <- dplyr::full_join(dfCoordSel, dfExprSel, by="cellID"))
rbenchmark::benchmark(dfTemp <- dplyr::full_join(dfCoordSel, dfExprSel, by="cellID"))
setwd("Desktop/biologicDev/")
getwd()
setwd("nextGenEvo2_app/")
shiny::runApp("../nextGenEvo2_app/")
q()
