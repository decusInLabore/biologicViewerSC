dfRes2
new.user <- paste0("'",username, "'@'bioinformatics.crick.ac.uk'")
query.u <- paste0("SELECT User, Host from mysql.user where User = '",username,"' and Host = 'bioinformatics.crick.ac.uk'")
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = "boeingS",
password = db.pwd,
host = "10.27.241.82",
dbname="operational"
)
dfExist <- DBI::dbGetQuery(dbDB, query.u)
DBI::dbDisconnect(dbDB)
dfExist
nrow(dfExist) == 1
query.drop <- paste0("drop user '",username, "'@'bioinformatics.crick.ac.uk'")
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = "boeingS",
password = db.pwd,
host = "10.27.241.82",
dbname="operational"
)
h2 <- DBI::dbGetQuery(dbDB, query.drop)
DBI::dbDisconnect(dbDB)
query.nu <- paste0("create user ",new.user," IDENTIFIED BY PASSWORD '",as.vector(dfRes$Password[i]),"';")
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = "boeingS",
password = db.pwd,
host = "10.27.241.82",
dbname="operational"
)
h <- DBI::dbGetQuery(dbDB, query.nu)
DBI::dbDisconnect(dbDB)
print(paste0(username, " ", i))
dfUpdate
dfUpdate
dfUpload
install.packages("remotes")
remotes::install_github("decusInLabore/biologicSeqTools")
remotes::install_github("decusinlabore/biologicViewerSC")
install.packages("remotes")
appParameterFile_Hpoly <-   system.file("extdata/examples/Hpoly.db.txt",package = "biologicViewerSC")
pathToAppColorParameters_Hpoly <- system.file("extdata/examples/Hpoly.colorParameters.txt",package = "biologicViewerSC")
## Here are build-in example files for the Ifng dataset:
## here: https://shiny-bioinformatics.crick.ac.uk/shiny/boeings/GliaIfngrKO_app
appParameterFile_WT_MT_infected <- system.file("extdata/examples/WT_MT_infected.db.txt",package = "biologicViewerSC")
pathToAppColorParameters_WT_MT_infected <- system.file("extdata/examples/WT_MT_infected.colorParameters.txt",package = "biologicViewerSC")
rep <- 27 * 450 *0 75
rep = 27 * 450 *0 75
27 * 450 * 0 75
450*5
rep = 27 * 450 * 0.75
rep
114000-rep
rev <- 145000-rem
rem <- 114000-rep
rev <- 145000-rem
rev
rev/2
rep
364 * 0.75
rep = 27 * 364 * 0.75
rep
rep = 12 * 364 * 0.75
rep
rem <- 114000-rep
rev <- 145000-rem
rev/2
rem
364 * 0.75
rep = 27 * 364 * 0.75
rep
114300-rep
rem <- 114300-rep
rem
rev <- 145000-rem
rev
rem
rep = 27 * 364 * 0.75
rem <- 114300-rep
rem
rev <- 145000-rem
rev
rev/2
rep = 84 * 180 * 0.75
rep
rem <- 53000-rep
rem
41600+30000
"Y:/outputs/tolarp/ana.martinez-riano/stefan.boeing/ptl479/"
FN <- Y:/outputs/tolarp/ana.martinez-riano/stefan.boeing/ptl479/ptl479B.Seurat.Robj"
df <- data.frame(
cluster_id = c(1:10),
segment = c("retail","retail","retail","bank","bank","public_entity","retail","retail","retail","public_entity"),
amount = c(477.90,588.20,89997.56,789.12,312.98,477.90,588.20,89997.56,789.12,312.98),
accounts = c(43,82,40,95,77,52,84,57,76,70)
)
install.packages("rio")
library(dplyr)
library(ggplot2)
movements <- df
movements %>%
mutate(day_of_week = wday(date_new)) %>%
mutate(month = month(date_new))
?wday
movements <- rio::import(file = "data/banking.xls")
mtcars[order(mtcars$gear, mtcars$mpg), ]
library(dplyr)
arrange(.data = mtcars, gear, mpg)
data
.data
arrange(.data = mtcars, gear, mpg)
mtcars >%> arrange(., gear, mpg)
mtcars >%> arrange(gear, mpg)
mtcars %>% arrange(., gear, mpg)
mtcars %>% arrange(., gear, mpg)
mtcars %>% arrange(gear, mpg)
mtcars %>% arrange(boot_samp <- rsample::bootstraps(mtcars, times = 3)gear, mpg)
boot_samp <- rsample::bootstraps(mtcars, times = 3)
install.packages("rsample")
boot_samp <- rsample::bootstraps(mtcars, times = 3)
boot_samp
class(boot_samp)
small_mtcars <- arrange(mtcars, gear)
small_mtcars <- slice(small_mtcars, 1:10)
small_mtcars
small_mtcars <-
mtcars %>%
arrange(gear) %>%
slice(1:10)
mtcars %>%
arrange(gear) %>%
slice(1:10)
library(ggplot2)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = lm)
n <- nrow(mtcars)
ratios <- rep(NA_real_, n)
for (car in 1:n) {
ratios[car] <- log(mtcars$mpg[car]/mtcars$wt[car])
}
head(ratios)
ratios <- log(mtcars$mpg/mtcars$wt)
compute_log_ratio <- function(mpg, wt) {
log_base <- getOption("log_base", default = exp(1)) # gets external data
results <- log(mpg/wt, base = log_base)
print(mean(results))                                # prints to the console
done <<- TRUE                                       # sets external data
results
}
compute_log_ratio <- function(mpg, wt, log_base = exp(1)) {
log(mpg/wt, base = log_base)
}
map2_dbl(mtcars$mpg, mtcars$wt, ~ log(.x/.y)) %>%
head()
purrr
library(purrr)
map_dbl(head(mtcars$mpg, 3), sqrt)
mtcars$mpg
head(mtcars$mpg, 3)
map_dbl(head(mtcars$mpg, 3), sqrt)
map(head(mtcars$mpg, 3), sqrt)
map2_dbl(mtcars$mpg, mtcars$wt, ~ log(.x/.y)) %>%
head()
data.frame(`variable 1` = 1:2, two = 3:4)
df <- data.frame(`variable 1` = 1:2, two = 3:4, check.names = FALSE)
df
tbbl <- tibble(`variable 1` = 1:2, two = 3:4)
tbbl
library(tidyverse)
library(lubridate)
url <- "http://bit.ly/raw-train-data-csv"
all_stations <-
# Step 1: Read in the data.
read_csv(url)
all_stations
all_stations <-
# Step 1: Read in the data.
read_csv(url) %>%
# Step 2: filter columns and rename stationname
dplyr::select(station = stationname, date, rides) %>%
# Step 3: Convert the character date field to a date encoding.
# Also, put the data in units of 1K rides
mutate(date = mdy(date), rides = rides / 1000) %>%
# Step 4: Summarize the multiple records using the maximum.
group_by(date, station) %>%
summarize(rides = max(rides), .groups = "drop")
all_stations
library(tidyverse)
data(crickets, package = "modeldata")
names(crickets)
install.packages("modeldata")
library(tidyverse)
data(crickets, package = "modeldata")
names(crickets)
ggplot(crickets,
aes(x = temp, y = rate, color = species, pch = species, lty = species)) +
# Plot points for each data point and color by species
geom_point(size = 2) +
# Show a simple linear model fit created separately for each species:
geom_smooth(method = lm, se = FALSE, alpha = 0.5) +
scale_color_brewer(palette = "Paired") +
labs(x = "Temperature (C)", y = "Chirp Rate (per minute)")
crickets
rate ~ temp
rate ~ temp + species + temp:species
rate ~ temp * species
interaction_fit <-  lm(rate ~ (temp + species)^2, data = crickets)
interaction_fit
par(mfrow = c(1, 2))
# Show residuals vs predicted values:
plot(interaction_fit, which = 1)
main_effect_fit <-  lm(rate ~ temp + species, data = crickets)
# Compare the two:
anova(main_effect_fit, interaction_fit)
#> Analysis of Variance Table
#>
#> Model 1: rate ~ temp + species
#> Model 2: rate ~ (temp + species)^2
#>   Res.Df  RSS Df Sum of Sq    F Pr(>F)
#> 1     28 89.3
summary(main_effect_fit)
corr_res <- map(mtcars %>% select(-mpg), cor.test, y = mtcars$mpg)
corr_res
mtcars %>% select(-mpg), cor.test, y = mtcars$mpg)
mtcars %>% select(-mpg), cor.test, y = mtcars$mpg))
mtcars %>% select(-mpg), cor.test, y = mtcars$mpg)
mtcars %>% select(-mpg)
mtcars %>% select(-mpg) %>% head()
mtcars  %>% head()
mtcars %>% select(-mpg, cyl) %>% head()
install.packages("broom")
library(broom)
tidy(corr_res[[1]])
corr_res[[1]]
tidy(corr_res[[1]])
class(tidy(corr_res[[1]]))
corr_res %>%
# Convert each to a tidy format; `map_dfr()` stacks the data frames
map_dfr(tidy, .id = "predictor")
corr_res %>%
# Convert each to a tidy format; `map_dfr()` stacks the data frames
map_dfr(tidy, .id = "predictor")
corr_res %>% map_dfr(tidy, .id = "predictor")
library(dplyr)
corr_res %>% map_dfr(tidy, .id = "predictor")
library(purrr)
corr_res %>% map_dfr(tidy, .id = "predictor")
orr_res %>%
# Convert each to a tidy format; `map_dfr()` stacks the data frames
map_dfr(tidy, .id = "predictor") %>%
ggplot(aes(x = fct_reorder(predictor, estimate))) +
geom_point(aes(y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .1) +
labs(x = NULL, y = "Correlation with mpg")
library(ggplot2)
orr_res %>%
# Convert each to a tidy format; `map_dfr()` stacks the data frames
map_dfr(tidy, .id = "predictor") %>%
ggplot(aes(x = fct_reorder(predictor, estimate))) +
geom_point(aes(y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .1) +
labs(x = NULL, y = "Correlation with mpg")
corr_res %>%
# Convert each to a tidy format; `map_dfr()` stacks the data frames
map_dfr(tidy, .id = "predictor") %>%
ggplot(aes(x = fct_reorder(predictor, estimate))) +
geom_point(aes(y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .1) +
labs(x = NULL, y = "Correlation with mpg")
library(ggplot2)
corr_res %>%
# Convert each to a tidy format; `map_dfr()` stacks the data frames
map_dfr(tidy, .id = "predictor") %>%
ggplot(aes(x = fct_reorder(predictor, estimate))) +
geom_point(aes(y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .1) +
labs(x = NULL, y = "Correlation with mpg")
??fct_reorder
corr_res %>%
# Convert each to a tidy format; `map_dfr()` stacks the data frames
map_dfr(tidy, .id = "predictor") %>%
ggplot(aes(x = formats::fct_reorder(predictor, estimate))) +
geom_point(aes(y = estimate)) +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = .1) +
labs(x = NULL, y = "Correlation with mpg")
split_by_species <-
crickets %>%
group_nest(species)
split_by_species
crickets
crickets %>%
group_nest(species)
split_by_species <-
crickets %>%
group_nest(species)
split_by_species
data
model_by_species <-
split_by_species %>%
mutate(model = map(data, ~ lm(rate ~ temp, data = .x)))
library(modeldata) # This is also loaded by the tidymodels package
data(ames)
data(ames, package = "modeldata")
dim(ames)
library(tidymodels)
tidymodels_prefer()
install.packages("tidymodels")
library(tidymodels)
tidymodels_prefer()
ggplot(ames, aes(x = Sale_Price)) +
geom_histogram(bins = 50, col= "white")
ggplot(ames, aes(x = Sale_Price)) +
geom_histogram(bins = 50, col= "white") +
scale_x_log10()
ames <- ames %>% mutate(Sale_Price = log10(Sale_Price))
ames
library(tidymodels)
tidymodels_prefer()
# Set the random number stream using `set.seed()` so that the results can be
# reproduced later.
set.seed(501)
ames_split <- initial_split(ames, prop = 0.80)
ames_split
ames_train <- training(ames_split)
ames_test  <-  testing(ames_split)
dim(ames_train)
summary(ToothGrowth)
getwd()
df
dfDat
ames
names(ames)
ames$MS_SubClass %>% unique()
city <- c(rep("london",4),rep("moscow",4),rep("new_york",4), rep("rome",4))
date <- c(rep(c("june_2016","july_2016","august_2016","september_2016"),4))
temperature <- c(15,18,19,18,17,20,19,11,22,26,26,23,23,27,26,22) #source : wunderground.com
temperature_table <- data.frame(city,date,temperature)
temperature_table %>%
spread(key = date, value= temperature)-> wide_temperature
temperature
temperature_table
temperature_table$temperature %>% unique()
temperature_table %>%
pivot_wider(key = date, value= temperature)-> wide_temperature
wide_temperature
temperature_table %>%
pivot_wider(names_from = date, values_from = temperature)-> wide_temperature
wide_temperature
wide_temperature %>%
gather(key = "date", value = "temperature", -city)
pivot_longer(!city, names_to = "date", values_to = "temperature")
wide_temperature  %>%
pivot_longer(!city, names_to = "date", values_to = "temperature")
temperature_table %>%
pivot_wider(names_from = date, values_from = temperature)-> wide_temperature
wide_temperature
wide_temperature %>% str()
cash_flow_report
long <- wide_temperature  %>%
pivot_longer(!city, names_to = "date", values_to = "temperature")
long
long %>% select(date)
class(long %>% select(date))
long %>% select(date) %>% unlist()
long %>% select(date) %>% unlist() %>% mean()
long %>% select(temperature) %>% unlist() %>% mean()
long %>% select(temperature)
class(long %>% select(temperature) )
long %>% select(temperature) %>% unlist() %>% mean()
long %>% select(temperature) %>% unlist()
long %>% select(temperature) %>% unlist() %>% mean()
long %>% select(temperature) %>% unlist() %>% median()
long %>% select(temperature) %>% unlist() %>% var()
long %>% select(temperature) %>% unlist() %>% sd()
long %>% select(temperature) %>% unlist() %>% fivenum()
long %>% select(temperature) %>% unlist() %>% fivenum() -> quartiles
q <- quartiles[2:4]
kewness <- ((q[3]- q[2])-(q[2]- q[1]))/(q[3]-q[1])
kewness
username <- "RN20202_da"
pass <- "W68NyHMY"
host <- "10.27.241.82"
db <- "rll_data"
designTB <- "RN20202_designTable"
mainTB <- "RN20202_bulk_rna_seq_table"
pcaTB <- "RN20202_PCA"
species <- "mus_musculus"
geneIDcolumn <- "mgi_symbol"
alignmentGeneID <- "ENSMUSG"
library(bioLOGIC)
## Load the design table from database. Here we will retrieve information on samples.
dfDesign <- import.db.table.from.db(
dbname = db,
dbtable = designTB,
host = host,
user = username,
password = pass
)
username <- "RN20202_da"
pass <- "W68NyHMY"
host <- "10.27.241.82"
db <- "rll_data"
designTB <- "RN20202_designTable"
mainTB <- "RN20202_bulk_rna_seq_table"
pcaTB <- "RN20202_PCA"
species <- "mus_musculus"
geneIDcolumn <- "mgi_symbol"
alignmentGeneID <- "ENSMUSG"
dfDesign <- import.db.table.from.db(
dbname = db,
dbtable = designTB,
host = host,
user = username,
password = pass
)
View(dfDesign)
dfMainData <- import.db.table.from.db(
dbname = db,
dbtable = mainTB,
host = host,
user = username,
password = pass
)
dfPCA <- import.db.table.from.db(
dbname = db,
dbtable = pcaTB,
host = host,
user = username,
password = pass
)
View(dfPCA)
dfVar <- dfMainData[dfMainData$logFC_cut_off != 0 ,c(geneIDcolumn, alignmentGeneID)]
mostVarGenes <- as.vector(unique(sort(dfVar[,geneIDcolumn])))
mostVarGenes <- na.omit(mostVarGenes[mostVarGenes != ""])
# Most variable gene IDs
mostVarIDs <- as.vector(unique(sort(dfVar[,alignmentGeneID])))
mostVarIDs <- na.omit(mostVarIDs[mostVarIDs != ""])
c(A:Z)
(LETTERS)
class(LETTERS)
length(LETTERS)
getwd()
getwd()
ggplot2::guide_legend()
paste0('input[\'', "abc", "\'] == \'lg10Expr\'")
paste0('input[\'', "abc", "\'] == \'lg10Expr\' ||")
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || 'input[\'', "cde", "\'] == \'lg10Expr\'")
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || input[\'', "cde", "\'] == \'lg10Expr\'")
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || 'input[\'', "cde", "\'] == \'lg10Expr\'")
paste0('input[\'', "abc", "\'] == \'lg10Expr\'")
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || ")
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || input")
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || input[\'', "cde", "\']")
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || input[\'', "cde", \']")
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || input[', "cde", \']")
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || input[', "cde", \']"\)
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || ")
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || input")
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || input[\'', "abc", "\']")
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || input[\'', "cde", "\']")
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || input[, "cde", "\']")
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || input[ "cde", "\']")
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || input[\'', "cde", "\']")
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || input[\'', "cde", "\'])
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || input[', "cde", \']"\)
paste0('input[\'', "abc", "\'] == \'lg10Expr\' || input")
paste0('input[\'', ns('colorBy'), "\'] == \'lg10Expr\'")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\'")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\' || input[\'', print('colorBy')")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\' || input[\'', print('colorBy2'), "\'] == \'lg10Expr\'")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\' || input[\'', print('colorBy2'), \'] == \'lg10Expr\'")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\' || input[\', print('colorBy2'), \'] == \'lg10Expr\'")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\' || input[\'', print('colorBy2'), \'] == \'lg10Expr\'")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\' || input[\'', print('colorBy')")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\' || input[\'', print('colorBy')")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\' ")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\' || input[\'', print('colorBy2')")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\' || input[\', print('colorBy2')")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\' || input[\'", print('colorBy2')")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\' || input[\'", print('colorBy2'))
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\' || input[\'", print('colorBy2'), "\'] == \'lg10Expr\'")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\' || input[\'", print('colorBy2'), "\'] == \'lg10Expr\' || input[\'", print('colorBy3'), "\'] == \'lg10Expr\'  ")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\' ")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\' ")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\' ")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\' ")
colorBy
print('colorBy')
paste0('input[\'', ns('colorBy'), "\'] == \'lg10Expr\')
paste0('input[\'', ns('colorBy'), "\'] == \'lg10Expr\'")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\'")
paste0('input[\'', print('colorBy'), "\'] == \'lg10Expr\'")
a <- "abcd"
paste0('input[\'', print('colorBy'), "\'] == \'",a,"\'")
getwd()
49367503324 - 4400045260
49367503324 - 44400045260
49367503324 - 4400045260
49367503324 - 10*4400045260
49367503324 - 0.1*4400045260
49367503324 - 10*4400045260
49367503324 - 100*4400045260
49367503324 - *4400045260
49367503324 - 4400045260
49367503324 / 4400045260
getwd()
setwd("Y:/www/shiny/external/users/boeings/SC22177_app/")
golem::run_dev()
getwd()
