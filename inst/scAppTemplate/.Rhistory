})
}
dfColorTable <-  dfColorTable()
nameCol <- names(dfColorTable)[1]
nameColCol <- "dotColor"
labelID <- names(dfColorTable)[1]
dfColSel <- dfColorTable
colVec <- as.vector(dfColSel[,nameColCol])
names(colVec) <- as.vector(dfColSel[,nameCol])
colVec <- colVec[colVec != ""]
dfColSel <- dfColSel[order(dfColSel[,nameCol]),]
output$clusterColorPanel = renderUI({
dfColSel[["label"]] <- paste0(dfColSel[,nameCol], " ", labelID," Color" )
input_list <- lapply(1:nrow(dfColSel), function(i) {
# for each dynamically generated input, give a different name
clusterName <- as.vector(dfColSel[i,nameCol])
clusterColor <- as.vector(dfColSel[i,nameColCol])
label <- paste0(as.vector(dfColSel[i,nameCol]), " ",labelID," Color")
colourInput(inputId = clusterName, label = label, value = clusterColor)
})
do.call(tagList, input_list)
})
}
dfTempstore <- dfTemp
plot_select <- sort(as.vector(unique(dfTemp[, input$splitByColumn])))
plot_select
if (is.numeric(dfTemp$Dcolor)){
maxExpr <- max(as.vector(dfTemp$Dcolor))
} else{
maxExpr <- NULL
}
maxExpr
if (!is.numeric(dfTemp$x_axis)){
minX <- 0
maxX <- length(unique(dfTemp$x_axis)) + 1
} else {
maxX <- 1.1*max(dfTemp$x_axis, na.rm = T)
minX <- 1.1*min(dfTemp$x_axis, na.rm = T)
}
if (!is.numeric(dfTemp$y_axis)){
minY <- 0
maxY <- length(unique(dfTemp$y_axis)) + 1
} else {
minY <- 1.1*min(dfTemp$y_axis, na.rm = T)
maxY <- 1.1*max(dfTemp$y_axis, na.rm = T)
}
dimVec <- c(minX, maxX, minY, maxY)
dimVec
maxX = dimVec[2]
minX = dimVec[1]
maxY = dimVec[4]
minY = dimVec[3]
df <- dfTemp
plot_name = "all"
colorBy = input$colorBy
dotsize = input$dotsize
lowColor = input$lowColor
dotcolor = input$dotcolor
background = input$background
x_axis = input$x_axis
y_axis = input$y_axis
maxX = maxX
minX = minX
maxY = maxY
minY = minY
geneSel = input$gene
showPlotLegend = input$showPlotLegend
if (is.null(maxX)){
maxX <- 1.1*max(df$x_axis, na.rm = T)
}
if (is.null(maxY)){
maxY <- 1.1*max(df$y_axis, na.rm = T)
}
if (is.null(minX)){
minX <- 1.1*min(df$x_axis, na.rm = T)
}
if (is.null(minY)){
minY <- 1.1*min(df$y_axis, na.rm = T)
}
splitOptions <- names(df)
rmVec <- c(
grep("orig_", splitOptions),
grep("sampleID", splitOptions),
grep("old_ident", splitOptions),
grep("hmIdent", splitOptions),
grep("color", tolower(splitOptions)),
grep("lg10expr", tolower(splitOptions))
)
if (length(rmVec) > 0){
splitOptions <- splitOptions[-rmVec]
}
## Remove all split options with more than 20 options ##
Nopt <- apply(df[,splitOptions], 2, function(x) length(unique(x)))
Nopt <- sort(Nopt[Nopt < 25], decreasing = F)
splitOptions <- as.vector(names(Nopt))
splitOptions
splitOptions <- names(df)
rmVec <- c(
grep("orig_", splitOptions),
grep("sampleID", splitOptions),
grep("old_ident", splitOptions),
grep("hmIdent", splitOptions),
grep("color", tolower(splitOptions)),
grep("lg10expr", tolower(splitOptions))
)
if (length(rmVec) > 0){
splitOptions <- splitOptions[-rmVec]
}
## Remove all split options with more than 20 options ##
Nopt <- apply(df[,splitOptions], 2, function(x) length(unique(x)))
Nopt <- sort(Nopt[Nopt < 25], decreasing = F)
splitOptions <- as.vector(names(Nopt))
## Done
nCellsTotal <- nrow(df)
nExpr <- nrow(df[df$gene != 0,])
percExpr <- 100*round(nrow(df[df$gene != 0,])/nCellsTotal, 3)
qGene <- unique(na.omit(df$gene))
qGene <- qGene[qGene != 0]
if (colorBy %in% splitOptions ){
df$Dcolor[df$Dcolor == ""] <- "Rest"
df$Dcolor <- factor(df$Dcolor)
} else if( is.numeric( df$Dcolor ) ) {
minExpr <- floor(min(df$Dcolor, na.rm = T))
if (is.null(maxExpr)){
maxExpr <- ceiling(max(df$Dcolor, na.rm = T))
if (maxExpr == 1){
ceiling_dec <- function(x, level=1) round(x + 5*10^(-level-1), level)
maxExpr <- ceiling_dec(max(df$Dcolor, na.rm = T),2)
}
}
} else {
df$Dcolor[df$Dcolor == ""] <- "Rest"
df$Dcolor <- factor(df$Dcolor)
}
df$Dcolor
is.numeric(df$x_axis)
!is.numeric(df$x_axis)
df$x_axis
plotLogic <- "density"
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x_axis, color=Dcolor)
) + ggplot2::geom_density(alpha=0.7) + ggplot2::geom_point(
shape = 16,
size = as.numeric(dotsize)
)
p
p <- ggplot2::ggplot(
data = df, ggplot2::aes(y_axis, color=Dcolor)
) + ggplot2::geom_density(alpha=0.7) + ggplot2::geom_point(
shape = 16,
size = as.numeric(dotsize)
)
p
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x=y_axis, color=Dcolor)
) + ggplot2::geom_density(alpha=0.7) + ggplot2::geom_point(
shape = 16,
size = as.numeric(dotsize)
)
p
y_axis
head(df)
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x=y_axis, color=Dcolor)
) + ggplot2::geom_density(alpha=0.7)
p
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x=y_axis, color=Dcolor)
) + ggplot2::geom_density(alpha=0.7, fill=Dcolor)
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x=y_axis, color=Dcolor)
) + ggplot2::geom_density(alpha=0.7, fill=Dcolor)
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x=y_axis, color=Dcolor,fill=Dcolor)
) + ggplot2::geom_density(alpha=0.7)
p
df$x_axis
df$x_axis[1] == "Densityplot"
if (df$x_axis[1] == "Densityplot"){
plotLogic <- "density"
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x=y_axis, color=Dcolor,fill=Dcolor)
) + ggplot2::geom_density(alpha=0.3)
}
p
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x=y_axis, color=Dcolor,fill=Dcolor)
) + ggplot2::geom_density(alpha=0.3, position="stack")
p
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x=y_axis, color=Dcolor,fill=Dcolor)
) + ggplot2::geom_hist(alpha=0.3, position="stack")
plotLogic <- "historgram"
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x=y_axis, color=Dcolor,fill=Dcolor)
) + ggplot2::geom_histogram(alpha=0.3, position="stack")
p
df$x_axis
df$y_axis
Nbin <- round(length(df$y_axis/2))
Nbin
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x=y_axis, color=Dcolor,fill=Dcolor)
) + ggplot2::geom_histogram(alpha=0.3, position="stack", bins = Nbin)
p
Nbin <- ceiling(length(df$y_axis/10))
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x=y_axis, color=Dcolor,fill=Dcolor)
) + ggplot2::geom_histogram(alpha=0.3, position="stack", bins = Nbin)
p
Nbin
Nbin <- ceiling(length(df$y_axis)/10)
Nbin
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x=y_axis, color=Dcolor,fill=Dcolor)
) + ggplot2::geom_histogram(alpha=0.3, position="stack", bins = Nbin)
p
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x_axis, y_axis, color=Dcolor)
) + geom_violin(trim=FALSE, fill="#E8E8E8"
)+ ggplot2::geom_jitter(height = 0)
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x_axis, y_axis, color=Dcolor)
) + ggplot2::geom_violin(trim=FALSE, fill="#E8E8E8"
)+ ggplot2::geom_jitter(height = 0)
p
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x_axis, y_axis, color=Dcolor)
) + ggplot2::geom_violin(trim=FALSE, fill="red")+ ggplot2::geom_jitter(height = 0)
p
shiny::runApp("viewerCodeImprovements_app/")
shiny::runApp("../viewerCodeImprovements_app/")
shiny::runApp("../viewerCodeImprovements_app/")
shiny::runApp("../viewerCodeImprovements_app/")
shiny::runApp("../viewerCodeImprovements_app/")
###########################################################################
## Determine plot logic                                                  ##
if (!is.numeric(df$x_axis)){
#######################################################################
## Decide on factorial display logic                                 ##
if (df$x_axis[1] == "Densityplot"){
plotLogic <- "density"
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x=y_axis, y=..density.., color=Dcolor,fill=Dcolor)
) + ggplot2::geom_density(alpha=0.3, position="stack")
} else if (df$x_axis[1] == "Histogram"){
plotLogic <- "historgram"
Nbin <- ceiling(length(df$y_axis)/10)
p <- ggplot2::ggplot(
data = df, ggplot2::aes(y=y_axis, color=Dcolor,fill=Dcolor)
) + ggplot2::geom_histogram(alpha=0.3, position="stack", bins = Nbin)
} else {
plotLogic <- "violin"
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x_axis, y_axis, color=Dcolor)
) + ggplot2::geom_violin(trim=FALSE, fill="#E8E8E8"
)+ ggplot2::geom_jitter(height = 0)
}
## Done deciding factorial display logic
#########################################################################
} else {
plotLogic <- "point"
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x_axis, y_axis, color=Dcolor)
) + ggplot2::geom_point(
shape = 16,
size = as.numeric(dotsize)
)
}
## Done plot logic                                                       ##
###########################################################################
p
shiny::runApp("../viewerCodeImprovements_app/")
if (is.null(maxX)){
maxX <- 1.1*max(df$x_axis, na.rm = T)
}
if (is.null(maxY)){
maxY <- 1.1*max(df$y_axis, na.rm = T)
}
if (is.null(minX)){
minX <- 1.1*min(df$x_axis, na.rm = T)
}
if (is.null(minY)){
minY <- 1.1*min(df$y_axis, na.rm = T)
}
###########################################################################
## Determine split options                                               ##
splitOptions <- names(df)
rmVec <- c(
grep("orig_", splitOptions),
grep("sampleID", splitOptions),
grep("old_ident", splitOptions),
grep("hmIdent", splitOptions),
grep("color", tolower(splitOptions))
)
if (length(rmVec) > 0){
splitOptions <- splitOptions[-rmVec]
}
## Remove all split options with more than 20 options ##
Nopt <- apply(df[,splitOptions], 2, function(x) length(unique(x)))
Nopt <- sort(Nopt[Nopt < 25], decreasing = F)
splitOptions <- as.vector(names(Nopt))
splitOptions <- splitOptions[splitOptions != "lg10Expr"]
## Done                                                                  ##
###########################################################################
nCellsTotal <- nrow(df)
nExpr <- nrow(df[df$gene != 0,])
percExpr <- 100*round(nrow(df[df$gene != 0,])/nCellsTotal, 3)
qGene <- unique(na.omit(df$gene))
qGene <- qGene[qGene != 0]
#plotInput <- reactive({
if (colorBy %in% splitOptions ){
df$Dcolor[df$Dcolor == ""] <- "Rest"
df$Dcolor <- factor(df$Dcolor)
} else if( is.numeric( df$Dcolor ) ) {
minExpr <- floor(min(df$Dcolor, na.rm = T))
if (is.null(maxExpr)){
maxExpr <- ceiling(max(df$Dcolor, na.rm = T))
if (maxExpr == 1){
ceiling_dec <- function(x, level=1) round(x + 5*10^(-level-1), level)
maxExpr <- ceiling_dec(max(df$Dcolor, na.rm = T),2)
}
}
} else {
df$Dcolor[df$Dcolor == ""] <- "Rest"
df$Dcolor <- factor(df$Dcolor)
}
###########################################################################
## Determine plot logic                                                  ##
if (!is.numeric(df$x_axis)){
#######################################################################
## Decide on factorial display logic                                 ##
if (df$x_axis[1] == "Densityplot"){
plotLogic <- "density"
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x=y_axis, y=..density.., color=Dcolor,fill=Dcolor)
) + ggplot2::geom_density(alpha=0.3, position="stack")
} else if (df$x_axis[1] == "Histogram"){
plotLogic <- "historgram"
Nbin <- ceiling(length(df$y_axis)/10)
p <- ggplot2::ggplot(
data = df, ggplot2::aes(y=y_axis, color=Dcolor,fill=Dcolor)
) + ggplot2::geom_histogram(alpha=0.3, position="stack", bins = Nbin)
} else {
plotLogic <- "violin"
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x_axis, y_axis, color=Dcolor)
) + ggplot2::geom_violin(trim=FALSE, fill="#E8E8E8"
)+ ggplot2::geom_jitter(height = 0)
}
## Done deciding factorial display logic
#########################################################################
} else {
plotLogic <- "point"
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x_axis, y_axis, color=Dcolor)
) + ggplot2::geom_point(
shape = 16,
size = as.numeric(dotsize)
)
}
## Done plot logic                                                       ##
###########################################################################
###########################################################################
## Determine plot logic                                                  ##
if (!is.numeric(df$x_axis)){
#######################################################################
## Decide on factorial display logic                                 ##
if (df$x_axis[1] == "Densityplot"){
plotLogic <- "density"
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x=y_axis, y=..density.., color=Dcolor,fill=Dcolor)
) + ggplot2::geom_density(alpha=0.3, position="stack")
} else if (df$x_axis[1] == "Histogram"){
plotLogic <- "historgram"
Nbin <- ceiling(length(df$y_axis)/10)
p <- ggplot2::ggplot(
data = df, ggplot2::aes(y=y_axis, color=Dcolor,fill=Dcolor)
) + ggplot2::geom_histogram(alpha=0.3, position="stack", bins = Nbin)
} else {
plotLogic <- "violin"
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x_axis, y_axis, color=Dcolor)
) + ggplot2::geom_violin(trim=FALSE, fill="#E8E8E8"
)+ ggplot2::geom_jitter(height = 0)
}
## Done deciding factorial display logic
#########################################################################
} else {
plotLogic <- "point"
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x_axis, y_axis, color=Dcolor)
) + ggplot2::geom_point(
shape = 16,
size = as.numeric(dotsize)
)
}
## Done plot logic                                                       ##
###########################################################################
p
p <- p + xlab(x_axis) + ylab(y_axis)
p <- p + ggplot2::xlab(x_axis) + ggplot2::ylab(y_axis)
p
x_axis
y_axis
y_axis = "Densityplot"
x_axis
x_axis = "lg10Expr"
df$y_axis[1]
if (is.null(maxX)){
maxX <- 1.1*max(df$x_axis, na.rm = T)
}
if (is.null(maxY)){
maxY <- 1.1*max(df$y_axis, na.rm = T)
}
if (is.null(minX)){
minX <- 1.1*min(df$x_axis, na.rm = T)
}
if (is.null(minY)){
minY <- 1.1*min(df$y_axis, na.rm = T)
}
###########################################################################
## Determine split options                                               ##
splitOptions <- names(df)
rmVec <- c(
grep("orig_", splitOptions),
grep("sampleID", splitOptions),
grep("old_ident", splitOptions),
grep("hmIdent", splitOptions),
grep("color", tolower(splitOptions)),
grep("lg10expr", tolower(splitOptions))
)
if (length(rmVec) > 0){
splitOptions <- splitOptions[-rmVec]
}
## Remove all split options with more than 20 options ##
Nopt <- apply(df[,splitOptions], 2, function(x) length(unique(x)))
Nopt <- sort(Nopt[Nopt < 25], decreasing = F)
splitOptions <- as.vector(names(Nopt))
## Done
nCellsTotal <- nrow(df)
nExpr <- nrow(df[df$gene != 0,])
percExpr <- 100*round(nrow(df[df$gene != 0,])/nCellsTotal, 3)
qGene <- unique(na.omit(df$gene))
qGene <- qGene[qGene != 0]
if (colorBy %in% splitOptions ){
df$Dcolor[df$Dcolor == ""] <- "Rest"
df$Dcolor <- factor(df$Dcolor)
} else if( is.numeric( df$Dcolor ) ) {
minExpr <- floor(min(df$Dcolor, na.rm = T))
if (is.null(maxExpr)){
maxExpr <- ceiling(max(df$Dcolor, na.rm = T))
if (maxExpr == 1){
ceiling_dec <- function(x, level=1) round(x + 5*10^(-level-1), level)
maxExpr <- ceiling_dec(max(df$Dcolor, na.rm = T),2)
}
}
} else {
df$Dcolor[df$Dcolor == ""] <- "Rest"
df$Dcolor <- factor(df$Dcolor)
}
df$x_axis
df$x_axis <- df$lg10Expr
df$y_axis <- "Densityplot"
is.numeric(df$x_axis)
is.numeric(df$x_axis)
df$y_axis[1]
plotLogic <- "density"
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x=y_axis, y=..density.., color=Dcolor,fill=Dcolor)
) + ggplot2::geom_density(alpha=0.3, position="stack")
p
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x=x_axis, y=..density.., color=Dcolor,fill=Dcolor)
) + ggplot2::geom_density(alpha=0.3, position="stack")
p
Nbin <- ceiling(length(df$x_axis)/10)
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x=x_axis, color=Dcolor,fill=Dcolor)
) + ggplot2::geom_histogram(alpha=0.3, position="stack", bins = Nbin)
p
p <- ggplot2::ggplot(
data = df, ggplot2::aes(x_axis, y_axis, color=Dcolor)
) + ggplot2::geom_violin(trim=FALSE, fill="#E8E8E8"
)+ ggplot2::geom_jitter(height = 0)
p
shiny::runApp("../viewerCodeImprovements_app/")
olorBy %in% splitOptions
colorBy %in% splitOptions
colorBy
plotLogig
plotLogic
shiny::runApp("../viewerCodeImprovements_app/")
shiny::runApp("../viewerCodeImprovements_app/")
shiny::runApp("../viewerCodeImprovements_app/")
shiny::runApp("../viewerCodeImprovements_app/")
shiny::runApp("../viewerCodeImprovements_app/")
shiny::runApp("../viewerCodeImprovements_app/")
getwd()
setwd("..")
FN <- "/Volumes/babs/working/boeings/Projects/pachnisv/tiffany.heanue/362C_10X_single_cell_RNA_seq_enteric_neurons_nuclei_rerun_SC18139/workdir/vpl362C.Seurat.Robj"
load(FN)
load(FN)
getwd()
mkdir("exampleData")
dir.create("exampleData")
save(OsC, file="exampleData/vpl362C.Seurat.Robj")
OsC
shiny::runApp("../viewerCodeImprovements_app/")
getwd()
setwd("viewerCodeImprovements_app/")
shiny::runApp("../viewerCodeImprovements_app/")
