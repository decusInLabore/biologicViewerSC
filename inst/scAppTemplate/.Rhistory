plotList[[tag]] <- ggplot2::ggplot(
data = dfPCA,
ggplot2::aes(x=PC1, y=PC2, fill = sample_group)
) + ggplot2::geom_vline(xintercept = 0, color = "grey", size=0.5
) + ggplot2::geom_hline(yintercept = 0, color = "grey", size=0.5
) + ggplot2::geom_point(
size=2,
shape = 21
)
}
if (!is.null(PCApercentVar)){
plotList[[tag]] <- plotList[[tag]] + ggplot2::labs(
title = "PCA Plot",
x = paste0("PC1 \n ",round(100* PCApercentVar[1]),"% variability explained"),
y = paste0("PC2 \n ",round(100* PCApercentVar[2]),"% variability explained")
)
} else {
plotList[[tag]] <- plotList[[tag]] + ggplot2::labs(
title = "PCA Plot",
x = paste0("PC1"),
y = paste0("PC2")
)
}
plotList[[tag]] <- plotList[[tag]] +  ggplot2::theme_bw() + ggplot2::theme(
axis.text.y   = ggplot2::element_text(size=8),
axis.text.x   = ggplot2::element_text(size=8),
axis.title.y  = ggplot2::element_text(size=12),
axis.title.x  = ggplot2::element_text(size=12),
axis.line = ggplot2::element_line(colour = "black"),
panel.border = ggplot2::element_rect(colour = "black", fill=NA, size=1),
plot.title = ggplot2::element_text(hjust = 0.5, size = 12)
)
###########################################################################
## Save plot to file                                                     ##
FNbase <- paste0(tag, VersionPdfExt)
if (exists("Obio")){
FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
} else {
FN <- paste0(reportFigDir, FNbase)
}
FNrel <- paste0("report_figures/", FNbase)
FNrelT <- paste0("report_tables/", FNbase)
pdf(FN)
print(plotList[[tag]])
dev.off()
##                                                                       ##
###########################################################################
# link <- paste0('<a href="https://biologic.crick.ac.uk/',project_id,'/pca?x_axis=PC1&y_axis=PC2', '" target="_blank">here</a>')
link <- ""
figCap <- paste0(
"**Figure ",
figureCount,
":** Variation in the first two PCA Dimensions. Download a pdf of this figure [here](", FNrel, "). ",
"Further PCA dimensions are available interacively ", link, ". "
)
figureCount <- figureCount + 1
NewChnk <- paste0(
paste0("### ", tag ," \n"),
"\n```{r ",tag,", results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
"\n",
"\n print(plotList[['",tag,"']])",
"\n cat(  '\n')",
"\n\n\n```\n"
)
chnkVec <- c(
chnkVec,
NewChnk
)
}
ames(plotList)
names(plotList)
## Displaying the first plot in the list
print(plotList[[1]])
rm(list=ls())
ls()
username <- "RN24046_da"
pass <- "KhwNQZTx"
host <- "10.27.241.82"
db <- "li_lab_data"
designTB <- "RN24046_designTable"
mainTB <- "RN24046_bulk_rna_seq_table"
pcaTB <- "RN24046_PCA"
countTB <- "RN24046_count_table"
species <- "mus_musculus"
geneIDcolumn <- "mgi_symbol"
alignmentGeneID <- "ENSMUSG"
NtopGenes <- 1000
figureCount <- 1
if (!requireNamespace("remotes")) {
install.packages("remotes")
}
if (!requireNamespace("bioLOGIC")) {
remotes::install_github("decusinlabore/bioLOGIC")
}
library(bioLOGIC)
## Load the design table from database. Here we will retrieve information on samples.
dfDesign <- import.db.table.from.db(dbname = db, dbtable = designTB, host = host, user = username, password = pass)
#
View(dfDesign)
dfMainData <- import.db.table.from.db(dbname = db, dbtable = mainTB, host = host, user = username, password = pass)
dfPCA <- import.db.table.from.db(dbname = db, dbtable = pcaTB, host = host, user = username, password = pass)
fCount <- import.db.table.from.db(dbname = db, dbtable = countTB, host = host, user = username, password = pass)
row.names(dfCount) <- dfCount[, alignmentGeneID]
dfCount <- import.db.table.from.db(dbname = db, dbtable = countTB, host = host, user = username, password = pass)
row.names(dfCount) <- dfCount[, alignmentGeneID]
dfCount$row_names <- NULL
dfCount <- data.matrix(dfCount)
View(dfCount)
## variable gene names
dfVar <- dfMainData[dfMainData$logFC_cut_off != 0, c(geneIDcolumn, alignmentGeneID)]
mostVarGenes <- as.vector(unique(sort(dfVar[, geneIDcolumn])))
mostVarGenes <- na.omit(mostVarGenes[mostVarGenes != ""])
# Most variable gene IDs
mostVarIDs <- as.vector(unique(sort(dfVar[, alignmentGeneID])))
mostVarIDs <- na.omit(mostVarIDs[mostVarIDs != ""])
dfDesign <- import.db.table.from.db(
dbname = db,
dbtable = designTB,
host = host,
user = username,
password = pass
)
# Subset df design
pcaSampleList <- list(
"PCAset1" = unique(
dfDesign[dfDesign$dataseries == "InVitro","sample_id"]
), #  All in vitro samples only
"PCAset2" = unique(
dfDesign[dfDesign$f_cell_line %in% c("AKPT_main", "AKPT_org", "AKPT2D_org"), "sample_id"]
),   #AKPTmain, AKPTorg and AKPT2Dorg
"PCAset3" = unique(
dfDesign[dfDesign$f_cell_line %in% c("AKPT_NTCsgRNA", "AKPT_Yap1KO", "AKPT_Ctnnb1KO"), "sample_id"]
),   #AKPTNTCsgRNA, AKPTYap1KO, AKPTWwtr1KO and AKPTCtnnb1KO
"PCAset4" = unique(
dfDesign[dfDesign$f_cell_line %in% c("AKPT_+_PBS", "AKPT_+_IFNg", "AKPT_+_IFNb", "AKPT_+_TNFa", "AKPT_+_IFNg_+_TNFa"), "sample_id"]
),   # AKPTplusPBS, AKPTplusIFNg, AKPTplusIFNb, AKPTplusTNFa and AKPTplusIFNgplusTNFa
"PCAset5" = unique(
dfDesign[dfDesign$f_cell_line %in% c("AKPT_NSG_NT_wk3", "AKPT_B6_control_wk3", "AKPT_org", "AKPT_main", "AKPT2D_org"), "sample_id"]
),   #AKPTNSGNTwk3, AKPTB6Ctrlwk3, AKPTorg, AKPTmain and AKPT2Dorg
"PCAset6" = unique(
dfDesign[dfDesign$dataseries != "InVitro","sample_id"]
), #  All in vivo samples only
"PCAset7" = unique(
dfDesign[dfDesign$f_cell_line %in% c("AKPT_B6_control_wk3", "AKPTmets_control_wk4", "AKPS1_NT_wk3", "AKPS2_NT_wk3", "AKP1_NT_wk3", "AKP2_NT_wk4"), "sample_id"]
),   # AKPTB6Ctrlwk3, AKPTmetsCtrlwk4, AKPS1NTwk3, AKPS2NTwk3, AKP1NTwk3 and AKP2NTwk4
"PCAset8" = unique(
dfDesign[dfDesign$f_cell_line %in% c("AKPT_NSG_NT_wk3", "AKPT_B6_control_wk3", "AKPT_B6_ICB_wk4", "AKPT_B6_ICB_wk5"), "sample_id"]
),   # AKPTNSGNTwk3, AKPTB6Ctrlwk3, AKPTB6ICBwk4 and AKPTB6ICBwk5
"PCAset9" = unique(
dfDesign[dfDesign$f_cell_line %in% c("AKPT_B6_control_wk3", "AKPT_B6_ICB_wk4", "AKPTmets_control_wk4", "AKPTmets_ICB_wk4"), "sample_id"]
)   # AKPTB6Ctrlwk3, AKPTB6ICBwk4, AKPTmetsCtrlwk4 and AKPTmetsICBwk4
)
d=1
dfDesign <- import.db.table.from.db(
dbname = db,
dbtable = designTB,
host = host,
user = username,
password = pass
)
## Subset ##
dfDesign <- dfDesign[dfDesign$sample_id %in% pcaSampleList[[d]],]
colData = unique(dfDesign[, c("sample_id", "sample_group")])
rownames(colData) = as.vector(colData$sample_id)
colData$sample_id <- NULL
colnames(colData)[1] = "condition"
colData$condition <- as.factor(colData$condition)
# dfRSEM <- Obio@RSEMcountMatrix
dds <- DESeq2::DESeqDataSetFromMatrix(
countData = dfCount[,row.names(colData)],
colData   = colData,
design    = ~ condition
)
dds
chnkVec <- as.vector(NULL, mode = "character")
plotList <- list()
dataMatrix = dataMatrix
install.packages("ontologyIndex")
# Load necessary libraries
library(ontologyIndex)
library(dplyr)
obo_file <- "C:\Users/boeings/Downloads/cl.obo"
obo_file <- "C:\Users/boeings/Downloads/cl.obo"
obo_file <- "C:/Users/boeings/Downloads/cl.obo"
ontology <- get_ontology(obo_file)
ontology
# Read the .obo file
ontology <- get_ontology(obo_file)
install.packages("rdflib")
owl_file <- "C:/Users/boeings/Downloads/cl.owl"
rdf <- rdf_parse(owl_file)
library(rdflib)
install.packages("xfun")
library(rdflib)
library(dplyr)
# Define the path to the .owl file
owl_file <- "C:/Users/boeings/Downloads/cl.owl"
# Read the .owl file
rdf <- rdf_parse(owl_file)
# Extract triples
triples <- rdf %>% rdf_query("SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object }")
# Convert triples to a data frame
df <- as.data.frame(triples)
View(df)
class(rdf)
rdf$model
rdf$storage
# Load necessary libraries
library(ontologyIndex)
library(dplyr)
# Define the path to the .obo file
obo_file <- "C:/Users/boeings/Downloads/cl.obo"
ontology <- get_ontology(obo_file)
# Function to read ontology and handle cycle detection
read_ontology <- function(file) {
tryCatch({
ontology <- get_ontology(file)
return(ontology)
}, error = function(e) {
message("Error: ", e$message)
# Extract the problematic term from the error message
problematic_term <- sub(".*ancestors of (.*)", "\\1", e$message)
message("Problematic term: ", problematic_term)
# Handle the cycle (e.g., remove the problematic term or its relationships)
# This is a placeholder for actual cycle handling logic
# You may need to manually inspect and modify the ontology data
return(NULL)
})
}
# Read the .obo file
ontology <- read_ontology(obo_file)
# Check if ontology was successfully read
if (!is.null(ontology)) {
# Extract terms and relationships
terms <- ontology$terms
relationships <- ontology$relationships
# Convert terms to a data frame
terms_df <- data.frame(
id = names(terms),
name = sapply(terms, function(x) x$name),
definition = sapply(terms, function(x) x$def),
stringsAsFactors = FALSE
)
# Convert relationships to a data frame
relationships_df <- data.frame(
parent = unlist(lapply(relationships, function(x) rep(names(x), length(x)))),
child = unlist(relationships),
stringsAsFactors = FALSE
)
# View the data frames
head(terms_df)
head(relationships_df)
}
head(terms_df)
!is.null(ontology)
ontology
obo_file <- "C:/Users/boeings/Downloads/cl.obo"
# Function to read ontology and handle cycle detection
read_ontology <- function(file) {
tryCatch({
ontology <- get_ontology(file)
return(ontology)
}, error = function(e) {
message("Error: ", e$message)
# Extract the problematic term from the error message
problematic_term <- sub(".*ancestors of (.*)", "\\1", e$message)
message("Problematic term: ", problematic_term)
# Handle the cycle (e.g., remove the problematic term or its relationships)
# This is a placeholder for actual cycle handling logic
# You may need to manually inspect and modify the ontology data
return(NULL)
})
}
# Read the .obo file
ontology <- read_ontology(obo_file)
# Define the path to the .obo file
obo_file <- "C:/Users/boeings/Downloads/cl-basic.obo"
# Function to read ontology and handle cycle detection
read_ontology <- function(file) {
tryCatch({
ontology <- get_ontology(file)
return(ontology)
}, error = function(e) {
message("Error: ", e$message)
# Extract the problematic term from the error message
problematic_term <- sub(".*ancestors of (.*)", "\\1", e$message)
message("Problematic term: ", problematic_term)
# Handle the cycle (e.g., remove the problematic term or its relationships)
# This is a placeholder for actual cycle handling logic
# You may need to manually inspect and modify the ontology data
return(NULL)
})
}
# Read the .obo file
ontology <- read_ontology(obo_file)
ontology
terms <- ontology$terms
relationships <- ontology$relationships
# Convert terms to a data frame
terms_df <- data.frame(
id = names(terms),
name = sapply(terms, function(x) x$name),
definition = sapply(terms, function(x) x$def),
stringsAsFactors = FALSE
)
# Convert relationships to a data frame
relationships_df <- data.frame(
parent = unlist(lapply(relationships, function(x) rep(names(x), length(x)))),
child = unlist(relationships),
stringsAsFactors = FALSE
)
# View the data frames
head(terms_df)
head(relationships_df)
tems
terms <- ontology$terms
terms
ontology$id
class(ontology)
terms_df <- data.frame(
id = names(terms),
name = sapply(terms, function(x) x$name),
definition = sapply(terms, function(x) x$def),
stringsAsFactors = FALSE
)
ontology$id
names(ontology$id)
terms <- ontology$id
terms
class(terms)
ontology$name
terms <- ontology$name
terms
head(terms)
id = names(terms)
head(id)
name = sapply(terms, function(x) x$name)
class(terms)
head(terms)
head(as.vector(x))
head(as.vector(terms_df))
head(as.vector(terms))
name = as.vector(terms)
ontology$parents
library(httr)
library(jsonlite)
# Define the API endpoint
api_endpoint <- "https://www.ebi.ac.uk/gxa/sc/experiment/EXPERIMENT_ID/marker-genes"
get_marker_genes <- function(ontology_id) {
response <- GET(paste0(api_endpoint, "?ontologyId=", ontology_id))
if (status_code(response) == 200) {
data <- fromJSON(content(response, "text"))
return(data$markerGenes)
} else {
stop("Failed to retrieve data")
}
}
# Example usage
ontology_id <- "CL:0000163"
marker_genes <- get_marker_genes(ontology_id)
# Example usage
ontology_id <- "CL:0000995"
marker_genes <- get_marker_genes(ontology_id)
library(httr)
library(jsonlite)
library(dplyr)
# Define the API endpoint
api_endpoint <- "https://www.ebi.ac.uk/gxa/sc/experiment/EXPERIMENT_ID/marker-genes"
# Function to get marker genes for a given ontology entry
get_marker_genes <- function(ontology_id) {
response <- GET(paste0(api_endpoint, "?ontologyId=", ontology_id))
if (status_code(response) == 200) {
data <- fromJSON(content(response, "text"))
marker_genes <- data$marker_genes
return(marker_genes)
} else {
return(NULL)
}
}
# Example ontology IDs
ontology_ids <- c("CL:0000163", "CL:0000540")  # Replace with actual ontology IDs
# Initialize an empty data frame
df <- data.frame(ontology_id = character(), marker_genes = character(), stringsAsFactors = FALSE)
# Loop through ontology IDs and get marker genes
for (ontology_id in ontology_ids) {
marker_genes <- get_marker_genes(ontology_id)
if (!is.null(marker_genes)) {
df <- rbind(df, data.frame(ontology_id = ontology_id, marker_genes = paste(marker_genes, collapse = ", "), stringsAsFactors = FALSE))
}
}
# View the data frame
print(df)
df
# Load necessary libraries
library(httr)
library(jsonlite)
library(dplyr)
# Define the API endpoint
api_endpoint <- "https://www.ebi.ac.uk/gxa/sc/experiment/EXPERIMENT_ID/marker-genes"
# Function to get marker genes for a given ontology entry
get_marker_genes <- function(ontology_id) {
response <- GET(paste0(api_endpoint, "?ontologyId=", ontology_id))
if (status_code(response) == 200) {
content <- content(response, "text")
json_data <- fromJSON(content)
marker_genes <- json_data$marker_genes
return(marker_genes)
} else {
return(NULL)
}
}
# Example ontology IDs
ontology_ids <- c("CL:0000163", "CL:0000540")  # Replace with actual ontology IDs
# Initialize an empty data frame
df <- data.frame(ontology_id = character(), marker_genes = character(), stringsAsFactors = FALSE)
# Loop through ontology IDs and get marker genes
for (ontology_id in ontology_ids) {
marker_genes <- get_marker_genes(ontology_id)
if (!is.null(marker_genes)) {
df <- rbind(df, data.frame(ontology_id = ontology_id, marker_genes = paste(marker_genes, collapse = ", "), stringsAsFactors = FALSE))
}
}
# View the data frame
print(df)
# Load necessary libraries
library(httr)
library(jsonlite)
library(dplyr)
# Define the API endpoint
api_endpoint <- "https://www.ebi.ac.uk/gxa/sc/experiment/EXPERIMENT_ID/marker-genes"
# Function to get marker genes for a given ontology entry
get_marker_genes <- function(ontology_id) {
response <- GET(paste0(api_endpoint, "?ontologyId=", ontology_id))
if (status_code(response) == 200) {
content <- content(response, "text")
json_data <- fromJSON(content)
marker_genes <- json_data$marker_genes
return(marker_genes)
} else {
return(NULL)
}
}
# Example ontology IDs
ontology_ids <- c("CL:0000163", "CL:0000540")  # Replace with actual ontology IDs
# Initialize an empty data frame
df <- data.frame(ontology_id = character(), marker_genes = character(), stringsAsFactors = FALSE)
df
# Load necessary libraries
library(httr)
library(jsonlite)
library(dplyr)
# Define the API endpoint
api_endpoint <- "https://www.ebi.ac.uk/gxa/sc/experiment/EXPERIMENT_ID/marker-genes"
# Function to get marker genes for a given ontology entry
get_marker_genes <- function(ontology_id) {
response <- GET(paste0(api_endpoint, "?ontologyId=", ontology_id))
if (status_code(response) == 200) {
content <- content(response, as = "text")
json_data <- fromJSON(content)
marker_genes <- json_data$marker_genes
return(marker_genes)
} else {
return(NULL)
}
}
# Example ontology IDs
ontology_ids <- c("CL:0000163", "CL:0000540")  # Replace with actual ontology IDs
# Initialize an empty data frame
df <- data.frame(ontology_id = character(), marker_genes = character(), stringsAsFactors = FALSE)
# Loop through ontology IDs and get marker genes
for (ontology_id in ontology_ids) {
marker_genes <- get_marker_genes(ontology_id)
if (!is.null(marker_genes)) {
df <- rbind(df, data.frame(ontology_id = ontology_id, marker_genes = paste(marker_genes, collapse = ", "), stringsAsFactors = FALSE))
}
}
# View the data frame
print(df)
ontology_ids <- c("0000084")
df <- data.frame(ontology_id = character(), marker_genes = character(), stringsAsFactors = FALSE)
df
for (ontology_id in ontology_ids) {
marker_genes <- get_marker_genes(ontology_id)
if (!is.null(marker_genes)) {
df <- rbind(df, data.frame(ontology_id = ontology_id, marker_genes = paste(marker_genes, collapse = ", "), stringsAsFactors = FALSE))
}
}
df
ontology_id <- ontology_ids[1]
ontology_id
ontology_id <- "CL:0000084"
ontology_ids <- c("CL:0000084")
df <- data.frame(ontology_id = character(), marker_genes = character(), stringsAsFactors = FALSE)
df
marker_genes <- get_marker_genes(ontology_id)
marker_genes
ontology_id
response <- GET(paste0(api_endpoint, "?ontologyId=", ontology_id))
response
api_endpoint
api_endpoint <- "https://www.ebi.ac.uk/gxa/sc/experiment/EXPERIMENT_ID/marker-genes"
response <- GET(paste0(api_endpoint, "?ontologyId=", ontology_id))
response
getwd()
setwd("Y:/www/shiny/external/users/boeings/substromalSC24010_app/")
shiny::runApp("../substromalSC24010_app/")
getwd()
list.files()
renv::restore()
shiny::runApp("../substromalSC24010_app/")
renv::install("htmltools")
q()
